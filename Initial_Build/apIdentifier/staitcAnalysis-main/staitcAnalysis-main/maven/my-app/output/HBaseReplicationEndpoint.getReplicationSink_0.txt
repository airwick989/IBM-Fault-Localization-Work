looking:HBaseReplicationEndpoint.getReplicationSink
HBaseReplicationEndpoint	getReplicationSink
-----------------------
/**
 * Get a randomly-chosen replication sink to replicate to.
 * @return a replication sink to replicate to
 */
protected synchronized SinkPeer getReplicationSink() throws IOException {
    if (sinkServers.isEmpty()) {
        LOG.info("Current list of sinks is out of date or empty, updating");
        chooseSinks();
    }
    if (sinkServers.isEmpty()) {
        throw new IOException("No replication sinks are available");
    }
    ServerName serverName = sinkServers.get(ThreadLocalRandom.current().nextInt(sinkServers.size()));
    return new SinkPeer(serverName, conn.getRegionServerAdmin(serverName));
}
-----------------------
/**
 * Get a randomly-chosen replication sink to replicate to.
 * @return a replication sink to replicate to
 */
protected synchronized SinkPeer getReplicationSink() throws IOException {
    if (sinkServers.isEmpty()) {
        LOG.info("Current list of sinks is out of date or empty, updating");
        chooseSinks();
        {
            List<ServerName> slaveAddresses = fetchSlavesAddresses();
            if (slaveAddresses.isEmpty()) {
                LOG.warn("No sinks available at peer. Will not be able to replicate");
            }
            Collections.shuffle(slaveAddresses, ThreadLocalRandom.current());
            int numSinks = (int) Math.ceil(slaveAddresses.size() * ratio);
            this.sinkServers = slaveAddresses.subList(0, numSinks);
            badReportCounts.clear();
        }
    }
    if (sinkServers.isEmpty()) {
        throw new IOException("No replication sinks are available");
    }
    ServerName serverName = sinkServers.get(ThreadLocalRandom.current().nextInt(sinkServers.size()));
    return new SinkPeer(serverName, conn.getRegionServerAdmin(serverName));
}-----------------------
possible Hot1
