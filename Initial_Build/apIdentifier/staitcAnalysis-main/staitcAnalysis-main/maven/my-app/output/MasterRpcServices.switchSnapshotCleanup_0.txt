looking:MasterRpcServices.switchSnapshotCleanup
MasterRpcServices	switchSnapshotCleanup
-----------------------
/**
 * Turn on/off snapshot auto-cleanup based on TTL
 * @param enabledNewVal Set to <code>true</code> to enable, <code>false</code> to disable
 * @param synchronous   If <code>true</code>, it waits until current snapshot cleanup is
 *                      completed, if outstanding
 * @return previous snapshot auto-cleanup mode
 */
private synchronized boolean switchSnapshotCleanup(final boolean enabledNewVal, final boolean synchronous) {
    final boolean oldValue = server.snapshotCleanupTracker.isSnapshotCleanupEnabled();
    server.switchSnapshotCleanup(enabledNewVal, synchronous);
    LOG.info("{} Successfully set snapshot cleanup to {}", server.getClientIdAuditPrefix(), enabledNewVal);
    return oldValue;
}
-----------------------
/**
 * Turn on/off snapshot auto-cleanup based on TTL
 * @param enabledNewVal Set to <code>true</code> to enable, <code>false</code> to disable
 * @param synchronous   If <code>true</code>, it waits until current snapshot cleanup is
 *                      completed, if outstanding
 * @return previous snapshot auto-cleanup mode
 */
private synchronized boolean switchSnapshotCleanup(final boolean enabledNewVal, final boolean synchronous) {
    final boolean oldValue = server.snapshotCleanupTracker.isSnapshotCleanupEnabled();
    server.switchSnapshotCleanup(enabledNewVal, synchronous);
    LOG.info("{} Successfully set snapshot cleanup to {}", server.getClientIdAuditPrefix(), enabledNewVal);
    return oldValue;
    {
        try {
            server.checkInitialized();
            final boolean enabled = request.getEnabled();
            final boolean isSynchronous = request.hasSynchronous() && request.getSynchronous();
            final boolean prevSnapshotCleanupRunning = this.switchSnapshotCleanup(enabled, isSynchronous);
            return SetSnapshotCleanupResponse.newBuilder().setPrevSnapshotCleanup(prevSnapshotCleanupRunning).build();
        } catch (IOException e) {
            throw new ServiceException(e);
        }
    }
}-----------------------
possible Hot1
