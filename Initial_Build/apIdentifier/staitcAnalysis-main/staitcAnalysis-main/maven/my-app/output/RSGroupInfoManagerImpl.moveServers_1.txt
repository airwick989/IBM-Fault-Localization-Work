looking:RSGroupInfoManagerImpl.moveServers
RSGroupInfoManagerImpl	moveServers
-----------------------
// Hold a lock on the manager instance while moving servers to prevent
// another writer changing our state while we are working.
synchronized (this) {
    // Presume first server's source group. Later ensure all servers are from this group.
    Address firstServer = servers.iterator().next();
    RSGroupInfo srcGrp = getRSGroupOfServer(firstServer);
    if (srcGrp == null) {
        // Be careful. This exception message is tested for in TestRSGroupAdmin2...
        throw new ConstraintException("Server " + firstServer + " is either offline or it does not exist.");
    }
    // Only move online servers (when moving from 'default') or servers from other
    // groups. This prevents bogus servers from entering groups
    if (RSGroupInfo.DEFAULT_GROUP.equals(srcGrp.getName())) {
        if (srcGrp.getServers().size() <= servers.size()) {
            throw new ConstraintException(KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE);
        }
        checkOnlineServersOnly(servers);
    }
    // Ensure all servers are of same rsgroup.
    for (Address server : servers) {
        String tmpGroup = getRSGroupOfServer(server).getName();
        if (!tmpGroup.equals(srcGrp.getName())) {
            throw new ConstraintException("Move server request should only come from one source " + "RSGroup. Expecting only " + srcGrp.getName() + " but contains " + tmpGroup);
        }
    }
    if (srcGrp.getServers().size() <= servers.size()) {
        // check if there are still tables reference this group
        for (TableDescriptor td : masterServices.getTableDescriptors().getAll().values()) {
            Optional<String> optGroupName = td.getRegionServerGroup();
            if (optGroupName.isPresent() && optGroupName.get().equals(srcGrp.getName())) {
                throw new ConstraintException("Cannot leave a RSGroup " + srcGrp.getName() + " that contains tables('" + td.getTableName() + "' at least) without servers to host them.");
            }
        }
    }
    // MovedServers may be < passed in 'servers'.
    Set<Address> movedServers = moveServers(servers, srcGrp.getName(), targetGroupName);
    moveServerRegionsFromGroup(movedServers, srcGrp.getServers(), targetGroupName, srcGrp.getName());
    LOG.info("Move servers done: moved {} servers from {} to {}", movedServers.size(), srcGrp.getName(), targetGroupName);
    if (LOG.isDebugEnabled()) {
        LOG.debug("Servers moved from {} to {}: {}", srcGrp.getName(), targetGroupName, movedServers);
    }
}
-----------------------
// another writer changing our state while we are working.
synchronized (this) {
    // Presume first server's source group. Later ensure all servers are from this group.
    Address firstServer = servers.iterator().next();
    RSGroupInfo srcGrp = getRSGroupOfServer(firstServer);
    if (srcGrp == null) {
        // Be careful. This exception message is tested for in TestRSGroupAdmin2...
        throw new ConstraintException("Server " + firstServer + " is either offline or it does not exist.");
    }
    // Only move online servers (when moving from 'default') or servers from other
    // groups. This prevents bogus servers from entering groups
    if (RSGroupInfo.DEFAULT_GROUP.equals(srcGrp.getName())) {
        if (srcGrp.getServers().size() <= servers.size()) {
            throw new ConstraintException(KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE);
        }
        checkOnlineServersOnly(servers);
        {
            // This uglyness is because we only have Address, not ServerName.
            // Online servers are keyed by ServerName.
            Set<Address> onlineServers = new HashSet<>();
            for (ServerName server : masterServices.getServerManager().getOnlineServers().keySet()) {
                onlineServers.add(server.getAddress());
            }
            for (Address address : servers) {
                if (!onlineServers.contains(address)) {
                    throw new DoNotRetryIOException("Server " + address + " is not an online server in 'default' RSGroup.");
                }
            }
        }
    }
    // Ensure all servers are of same rsgroup.
    for (Address server : servers) {
        String tmpGroup = getRSGroupOfServer(server).getName();
        if (!tmpGroup.equals(srcGrp.getName())) {
            throw new ConstraintException("Move server request should only come from one source " + "RSGroup. Expecting only " + srcGrp.getName() + " but contains " + tmpGroup);
        }
    }
    if (srcGrp.getServers().size() <= servers.size()) {
        // check if there are still tables reference this group
        for (TableDescriptor td : masterServices.getTableDescriptors().getAll().values()) {
            Optional<String> optGroupName = td.getRegionServerGroup();
            if (optGroupName.isPresent() && optGroupName.get().equals(srcGrp.getName())) {
                throw new ConstraintException("Cannot leave a RSGroup " + srcGrp.getName() + " that contains tables('" + td.getTableName() + "' at least) without servers to host them.");
            }
        }
    }
    // MovedServers may be < passed in 'servers'.
    Set<Address> movedServers = moveServers(servers, srcGrp.getName(), targetGroupName);
    moveServerRegionsFromGroup(movedServers, srcGrp.getServers(), targetGroupName, srcGrp.getName());
    LOG.info("Move servers done: moved {} servers from {} to {}", movedServers.size(), srcGrp.getName(), targetGroupName);
    if (LOG.isDebugEnabled()) {
        LOG.debug("Servers moved from {} to {}: {}", srcGrp.getName(), targetGroupName, movedServers);
    }
}-----------------------
possible Hot2
possible type Hot3_2
1
