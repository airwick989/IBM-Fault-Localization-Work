looking:writeQueue
MultiVersionConcurrencyControl	complete
-----------------------
synchronized (writeQueue) {
    writeEntry.markCompleted();
    long nextReadValue = NONE;
    boolean ranOnce = false;
    while (!writeQueue.isEmpty()) {
        ranOnce = true;
        WriteEntry queueFirst = writeQueue.getFirst();
        if (nextReadValue > 0) {
            if (nextReadValue + 1 != queueFirst.getWriteNumber()) {
                throw new RuntimeException("Invariant in complete violated, nextReadValue=" + nextReadValue + ", writeNumber=" + queueFirst.getWriteNumber());
            }
        }
        if (queueFirst.isCompleted()) {
            nextReadValue = queueFirst.getWriteNumber();
            writeQueue.removeFirst();
            queueFirst.runCompletionAction();
        } else {
            break;
        }
    }
    if (!ranOnce) {
        throw new RuntimeException("There is no first!");
    }
    if (nextReadValue > 0) {
        synchronized (readWaiters) {
            readPoint.set(nextReadValue);
            readWaiters.notifyAll();
        }
    }
    return readPoint.get() >= writeEntry.getWriteNumber();
}
-----------------------
synchronized (writeQueue) {
    writeEntry.markCompleted();
    long nextReadValue = NONE;
    boolean ranOnce = false;
    while (!writeQueue.isEmpty()) {
        ranOnce = true;
        WriteEntry queueFirst = writeQueue.getFirst();
        if (nextReadValue > 0) {
            if (nextReadValue + 1 != queueFirst.getWriteNumber()) {
                throw new RuntimeException("Invariant in complete violated, nextReadValue=" + nextReadValue + ", writeNumber=" + queueFirst.getWriteNumber());
            }
        }
        if (queueFirst.isCompleted()) {
            nextReadValue = queueFirst.getWriteNumber();
            writeQueue.removeFirst();
            queueFirst.runCompletionAction();
            {
                completionAction.ifPresent(Runnable::run);
            }
            {
                completionAction.ifPresent(Runnable::run);
            }
        } else {
            break;
        }
        {
            return this.completed;
        }
        {
            return this.completed;
        }
        {
            return this.completed;
        }
    }
    if (!ranOnce) {
        throw new RuntimeException("There is no first!");
    }
    if (nextReadValue > 0) {
        synchronized (readWaiters) {
            readPoint.set(nextReadValue);
            readWaiters.notifyAll();
        }
    }
    return readPoint.get() >= writeEntry.getWriteNumber();
    {
        this.completed = true;
    }
}-----------------------
possible Hot2
possible type Hot3_2
1
