looking:this.oldsources
ReplicationSourceManager	refreshSources
-----------------------
// synchronized on oldsources to avoid race with NodeFailoverWorker
synchronized (this.oldsources) {
    List<String> previousQueueIds = new ArrayList<>();
    for (Iterator<ReplicationSourceInterface> iter = this.oldsources.iterator(); iter.hasNext(); ) {
        ReplicationSourceInterface oldSource = iter.next();
        if (oldSource.getPeerId().equals(peerId)) {
            previousQueueIds.add(oldSource.getQueueId());
            oldSource.terminate(terminateMessage);
            iter.remove();
        }
    }
    for (String queueId : previousQueueIds) {
        ReplicationSourceInterface recoveredReplicationSource = createSource(queueId, peer);
        this.oldsources.add(recoveredReplicationSource);
        for (SortedSet<String> walsByGroup : walsByIdRecoveredQueues.get(queueId).values()) {
            walsByGroup.forEach(wal -> recoveredReplicationSource.enqueueLog(new Path(wal)));
        }
        toStartup.add(recoveredReplicationSource);
    }
}
-----------------------
// synchronized on oldsources to avoid race with NodeFailoverWorker
synchronized (this.oldsources) {
    List<String> previousQueueIds = new ArrayList<>();
    for (Iterator<ReplicationSourceInterface> iter = this.oldsources.iterator(); iter.hasNext(); ) {
        ReplicationSourceInterface oldSource = iter.next();
        if (oldSource.getPeerId().equals(peerId)) {
            previousQueueIds.add(oldSource.getQueueId());
            oldSource.terminate(terminateMessage);
            iter.remove();
        }
        {
            return getPeer().getId();
        }
    }
    for (String queueId : previousQueueIds) {
        ReplicationSourceInterface recoveredReplicationSource = createSource(queueId, peer);
        this.oldsources.add(recoveredReplicationSource);
        for (SortedSet<String> walsByGroup : walsByIdRecoveredQueues.get(queueId).values()) {
            walsByGroup.forEach(wal -> recoveredReplicationSource.enqueueLog(new Path(wal)));
        }
        toStartup.add(recoveredReplicationSource);
    }
}-----------------------
possible Hot2
possible type Hot3_2
2
