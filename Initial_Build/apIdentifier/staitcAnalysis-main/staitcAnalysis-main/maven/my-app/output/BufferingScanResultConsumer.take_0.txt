looking:BufferingScanResultConsumer.take
BufferingScanResultConsumer	take
-----------------------
public synchronized Result take() throws IOException, InterruptedException {
    for (; ; ) {
        if (!queue.isEmpty()) {
            return queue.poll();
        }
        if (finished) {
            if (error != null) {
                Throwables.propagateIfPossible(error, IOException.class);
                throw new IOException(error);
            } else {
                return null;
            }
        }
        wait();
    }
}
-----------------------
public synchronized Result take() throws IOException, InterruptedException {
    for (; ; ) {
        if (!queue.isEmpty()) {
            return queue.poll();
        }
        if (finished) {
            if (error != null) {
                Throwables.propagateIfPossible(error, IOException.class);
                throw new IOException(error);
            } else {
                return null;
            }
        }
        wait();
    }
}-----------------------
possible Hot1
possible type Hot3_2
1
