looking:flushLock
DefaultMobStoreFlusher	flushSnapshot
-----------------------
// TODO: We can fail in the below block before we complete adding this flush to
// list of store files. Add cleanup of anything put on filesystem if we fail.
synchronized (flushLock) {
    status.setStatus("Flushing " + store + ": creating writer");
    // Write the map out to the disk
    writer = createWriter(snapshot, true, writerCreationTracker);
    IOException e = null;
    try {
        // It's a mob store, flush the cells in a mob way. This is the difference of flushing
        // between a normal and a mob store.
        performMobFlush(snapshot, cacheFlushId, scanner, writer, status, throughputController, writerCreationTracker);
    } catch (IOException ioe) {
        e = ioe;
        // throw the exception out
        throw ioe;
    } finally {
        if (e != null) {
            writer.close();
        } else {
            finalizeWriter(writer, cacheFlushId, status);
        }
    }
}
-----------------------
// list of store files. Add cleanup of anything put on filesystem if we fail.
synchronized (flushLock) {
    status.setStatus("Flushing " + store + ": creating writer");
    // Write the map out to the disk
    writer = createWriter(snapshot, true, writerCreationTracker);
    IOException e = null;
    try {
        // It's a mob store, flush the cells in a mob way. This is the difference of flushing
        // between a normal and a mob store.
        performMobFlush(snapshot, cacheFlushId, scanner, writer, status, throughputController, writerCreationTracker);
        {
            StoreFileWriter mobFileWriter = null;
            int compactionKVMax = conf.getInt(HConstants.COMPACTION_KV_MAX, HConstants.COMPACTION_KV_MAX_DEFAULT);
            long mobCount = 0;
            long mobSize = 0;
            long time = snapshot.getTimeRangeTracker().getMax();
            mobFileWriter = mobStore.getStoreEngine().requireWritingToTmpDirFirst() ? mobStore.createWriterInTmp(new Date(time), snapshot.getCellsCount(), store.getColumnFamilyDescriptor().getCompressionType(), store.getRegionInfo().getStartKey(), false) : mobStore.createWriter(new Date(time), snapshot.getCellsCount(), store.getColumnFamilyDescriptor().getCompressionType(), store.getRegionInfo().getStartKey(), false, writerCreationTracker);
            // the target path is {tableName}/.mob/{cfName}/mobFiles
            // the relative path is mobFiles
            byte[] fileName = Bytes.toBytes(mobFileWriter.getPath().getName());
            ScannerContext scannerContext = ScannerContext.newBuilder().setBatchLimit(compactionKVMax).build();
            List<Cell> cells = new ArrayList<>();
            boolean hasMore;
            String flushName = ThroughputControlUtil.getNameForThrottling(store, "flush");
            boolean control = throughputController != null && !store.getRegionInfo().getTable().isSystemTable();
            if (control) {
                throughputController.start(flushName);
            }
            IOException ioe = null;
            // Clear all past MOB references
            mobRefSet.get().clear();
            try {
                do {
                    hasMore = scanner.next(cells, scannerContext);
                    if (!cells.isEmpty()) {
                        for (Cell c : cells) {
                            // If we know that this KV is going to be included always, then let us
                            // set its memstoreTS to 0. This will help us save space when writing to
                            // disk.
                            if (c.getValueLength() <= mobCellValueSizeThreshold || MobUtils.isMobReferenceCell(c) || c.getTypeByte() != KeyValue.Type.Put.getCode()) {
                                writer.append(c);
                            } else {
                                // append the original keyValue in the mob file.
                                mobFileWriter.append(c);
                                mobSize += c.getValueLength();
                                mobCount++;
                                // append the tags to the KeyValue.
                                // The key is same, the value is the filename of the mob file
                                Cell reference = MobUtils.createMobRefCell(c, fileName, this.mobStore.getRefCellTags());
                                writer.append(reference);
                            }
                            if (control) {
                                throughputController.control(flushName, c.getSerializedSize());
                            }
                        }
                        cells.clear();
                    }
                } while (hasMore);
            } catch (InterruptedException e) {
                ioe = new InterruptedIOException("Interrupted while control throughput of flushing " + flushName);
                throw ioe;
            } catch (IOException e) {
                ioe = e;
                throw e;
            } finally {
                if (control) {
                    throughputController.finish(flushName);
                }
                if (ioe != null) {
                    mobFileWriter.close();
                }
            }
            if (mobCount > 0) {
                // commit the mob file from temp folder to target folder.
                // If the mob file is committed successfully but the store file is not,
                // the committed mob file will be handled by the sweep tool as an unused
                // file.
                status.setStatus("Flushing mob file " + store + ": appending metadata");
                mobFileWriter.appendMetadata(cacheFlushId, false, mobCount);
                status.setStatus("Flushing mob file " + store + ": closing flushed file");
                mobFileWriter.close();
                mobStore.commitFile(mobFileWriter.getPath(), targetPath);
                LOG.debug("Flush store file: {}, store: {}", writer.getPath(), getStoreInfo());
                mobStore.updateMobFlushCount();
                mobStore.updateMobFlushedCellsCount(mobCount);
                mobStore.updateMobFlushedCellsSize(mobSize);
                // Add mob reference to store file metadata
                mobRefSet.get().add(mobFileWriter.getPath().getName());
            } else {
                try {
                    status.setStatus("Flushing mob file " + store + ": no mob cells, closing flushed file");
                    mobFileWriter.close();
                    // If the mob file is empty, delete it instead of committing.
                    store.getFileSystem().delete(mobFileWriter.getPath(), true);
                } catch (IOException e) {
                    LOG.error("Failed to delete the temp mob file", e);
                }
            }
        }
    } catch (IOException ioe) {
        e = ioe;
        // throw the exception out
        throw ioe;
    } finally {
        if (e != null) {
            writer.close();
        } else {
            finalizeWriter(writer, cacheFlushId, status);
            {
                // Write out the log sequence number that corresponds to this output
                // hfile. Also write current time in metadata as minFlushTime.
                // The hfile is current up to and including cacheFlushSeqNum.
                status.setStatus("Flushing " + store + ": appending metadata");
                writer.appendMetadata(cacheFlushSeqNum, false);
                writer.appendMobMetadata(ImmutableSetMultimap.<TableName, String>builder().putAll(store.getTableName(), mobRefSet.get()).build());
                status.setStatus("Flushing " + store + ": closing flushed file");
                writer.close();
            }
            {
                // Write out the log sequence number that corresponds to this output
                // hfile. Also write current time in metadata as minFlushTime.
                // The hfile is current up to and including cacheFlushSeqNum.
                status.setStatus("Flushing " + store + ": appending metadata");
                writer.appendMetadata(cacheFlushSeqNum, false);
                writer.appendMobMetadata(ImmutableSetMultimap.<TableName, String>builder().putAll(store.getTableName(), mobRefSet.get()).build());
                status.setStatus("Flushing " + store + ": closing flushed file");
                writer.close();
            }
        }
    }
}-----------------------
possible Hot2
possible type Hot3_2
2
