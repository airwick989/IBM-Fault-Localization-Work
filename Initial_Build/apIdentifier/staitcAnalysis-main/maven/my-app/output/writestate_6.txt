looking:writestate
synchronized (writestate) {
    if (this.lastReplayedOpenRegionSeqId > replaySeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying flush event :" + TextFormat.shortDebugString(flush) + " because its sequence id " + replaySeqId + " is smaller than this regions " + "lastReplayedOpenRegionSeqId of " + lastReplayedOpenRegionSeqId);
        return;
    }
    {
        if (readsEnabled && !this.writestate.readsEnabled) {
            LOG.info("Enabling reads for {}", getRegionInfo().getEncodedName());
        }
        this.writestate.setReadsEnabled(readsEnabled);
    }
    // If we were waiting for observing a flush or region opening event for not showing partial
    // data after a secondary region crash, we can allow reads now. This event means that the
    // primary was not able to flush because memstore is empty when we requested flush. By the
    // time we observe this, we are guaranteed to have up to date seqId with our previous
}

synchronized (writestate) {
    if (this.lastReplayedOpenRegionSeqId > replaySeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying flush event :" + TextFormat.shortDebugString(flush) + " because its sequence id " + replaySeqId + " is smaller than this regions " + "lastReplayedOpenRegionSeqId of " + lastReplayedOpenRegionSeqId);
        return;
    }
    // If we were waiting for observing a flush or region opening event for not showing partial
    // data after a secondary region crash, we can allow reads now. This event means that the
    // primary was not able to flush because memstore is empty when we requested flush. By the
    // time we observe this, we are guaranteed to have up to date seqId with our previous
    // assignment.
    this.setReadsEnabled(true);
}
possible Hot2
