looking:RegionServerMetricsWrapperRunnable.run
@Override
synchronized public void run() {
    try {
        HDFSBlocksDistribution hdfsBlocksDistribution = new HDFSBlocksDistribution();
        HDFSBlocksDistribution hdfsBlocksDistributionSecondaryRegions = new HDFSBlocksDistribution();
        long tempNumStores = 0, tempNumStoreFiles = 0, tempStoreFileSize = 0;
        long tempMemstoreSize = 0, tempOnHeapMemstoreSize = 0, tempOffHeapMemstoreSize = 0;
        long tempMaxStoreFileAge = 0, tempNumReferenceFiles = 0;
        long tempMaxStoreFileCount = 0;
        long avgAgeNumerator = 0, numHFiles = 0;
        long tempMinStoreFileAge = Long.MAX_VALUE;
        long tempFilteredReadRequestsCount = 0, tempCpRequestsCount = 0;
        long tempCheckAndMutateChecksFailed = 0;
        long tempCheckAndMutateChecksPassed = 0;
        long tempStorefileIndexSize = 0;
        long tempTotalStaticIndexSize = 0;
        long tempTotalStaticBloomSize = 0;
        long tempBloomFilterRequestsCount = 0;
        long tempBloomFilterNegativeResultsCount = 0;
        long tempBloomFilterEligibleRequestsCount = 0;
        long tempNumMutationsWithoutWAL = 0;
        long tempDataInMemoryWithoutWAL = 0;
        double tempPercentFileLocal = 0;
        double tempPercentFileLocalSecondaryRegions = 0;
        long tempFlushedCellsCount = 0;
        long tempCompactedCellsCount = 0;
        long tempMajorCompactedCellsCount = 0;
        long tempFlushedCellsSize = 0;
        long tempCompactedCellsSize = 0;
        long tempMajorCompactedCellsSize = 0;
        long tempCellsCountCompactedToMob = 0;
        long tempCellsCountCompactedFromMob = 0;
        long tempCellsSizeCompactedToMob = 0;
        long tempCellsSizeCompactedFromMob = 0;
        long tempMobFlushCount = 0;
        long tempMobFlushedCellsCount = 0;
        long tempMobFlushedCellsSize = 0;
        long tempMobScanCellsCount = 0;
        long tempMobScanCellsSize = 0;
        long tempBlockedRequestsCount = 0;
        int regionCount = 0;
        long tempReadRequestsCount = 0;
        long tempWriteRequestsCount = 0;
        long currentReadRequestsCount = 0;
        long currentWriteRequestsCount = 0;
        long lastReadRequestsCount = 0;
        long lastWriteRequestsCount = 0;
        long readRequestsDelta = 0;
        long writeRequestsDelta = 0;
        long totalReadRequestsDelta = 0;
        long totalWriteRequestsDelta = 0;
        String encodedRegionName;
        for (HRegion r : regionServer.getOnlineRegionsLocalContext()) {
            encodedRegionName = r.getRegionInfo().getEncodedName();
            currentReadRequestsCount = r.getReadRequestsCount();
            currentWriteRequestsCount = r.getWriteRequestsCount();
            if (requestsCountCache.containsKey(encodedRegionName)) {
                lastReadRequestsCount = requestsCountCache.get(encodedRegionName).get(0);
                lastWriteRequestsCount = requestsCountCache.get(encodedRegionName).get(1);
                readRequestsDelta = currentReadRequestsCount - lastReadRequestsCount;
                writeRequestsDelta = currentWriteRequestsCount - lastWriteRequestsCount;
                totalReadRequestsDelta += readRequestsDelta;
                totalWriteRequestsDelta += writeRequestsDelta;
                // Update cache for our next comparision
                requestsCountCache.get(encodedRegionName).set(0, currentReadRequestsCount);
                requestsCountCache.get(encodedRegionName).set(1, currentWriteRequestsCount);
            } else {
                // List[0] -> readRequestCount
                // List[1] -> writeRequestCount
                ArrayList<Long> requests = new ArrayList<Long>(2);
                requests.add(currentReadRequestsCount);
                requests.add(currentWriteRequestsCount);
                requestsCountCache.put(encodedRegionName, requests);
                totalReadRequestsDelta += currentReadRequestsCount;
                totalWriteRequestsDelta += currentWriteRequestsCount;
            }
            tempReadRequestsCount += r.getReadRequestsCount();
            tempWriteRequestsCount += r.getWriteRequestsCount();
            tempNumMutationsWithoutWAL += r.getNumMutationsWithoutWAL();
            tempDataInMemoryWithoutWAL += r.getDataInMemoryWithoutWAL();
            tempCpRequestsCount += r.getCpRequestsCount();
            tempFilteredReadRequestsCount += r.getFilteredReadRequestsCount();
            tempCheckAndMutateChecksFailed += r.getCheckAndMutateChecksFailed();
            tempCheckAndMutateChecksPassed += r.getCheckAndMutateChecksPassed();
            tempBlockedRequestsCount += r.getBlockedRequestsCount();
            List<? extends Store> storeList = r.getStores();
            tempNumStores += storeList.size();
            for (Store store : storeList) {
                tempNumStoreFiles += store.getStorefilesCount();
                tempMemstoreSize += store.getMemStoreSize().getDataSize();
                tempOnHeapMemstoreSize += store.getMemStoreSize().getHeapSize();
                tempOffHeapMemstoreSize += store.getMemStoreSize().getOffHeapSize();
                tempStoreFileSize += store.getStorefilesSize();
                tempMaxStoreFileCount = Math.max(tempMaxStoreFileCount, store.getStorefilesCount());
                OptionalLong storeMaxStoreFileAge = store.getMaxStoreFileAge();
                if (storeMaxStoreFileAge.isPresent() && storeMaxStoreFileAge.getAsLong() > tempMaxStoreFileAge) {
                    tempMaxStoreFileAge = storeMaxStoreFileAge.getAsLong();
                }
                OptionalLong storeMinStoreFileAge = store.getMinStoreFileAge();
                if (storeMinStoreFileAge.isPresent() && storeMinStoreFileAge.getAsLong() < tempMinStoreFileAge) {
                    tempMinStoreFileAge = storeMinStoreFileAge.getAsLong();
                }
                long storeHFiles = store.getNumHFiles();
                numHFiles += storeHFiles;
                tempNumReferenceFiles += store.getNumReferenceFiles();
                OptionalDouble storeAvgStoreFileAge = store.getAvgStoreFileAge();
                if (storeAvgStoreFileAge.isPresent()) {
                    avgAgeNumerator = (long) (avgAgeNumerator + storeAvgStoreFileAge.getAsDouble() * storeHFiles);
                }
                tempStorefileIndexSize += store.getStorefilesRootLevelIndexSize();
                tempTotalStaticBloomSize += store.getTotalStaticBloomSize();
                tempTotalStaticIndexSize += store.getTotalStaticIndexSize();
                tempBloomFilterRequestsCount += store.getBloomFilterRequestsCount();
                tempBloomFilterNegativeResultsCount += store.getBloomFilterNegativeResultsCount();
                tempBloomFilterEligibleRequestsCount += store.getBloomFilterEligibleRequestsCount();
                tempFlushedCellsCount += store.getFlushedCellsCount();
                tempCompactedCellsCount += store.getCompactedCellsCount();
                tempMajorCompactedCellsCount += store.getMajorCompactedCellsCount();
                tempFlushedCellsSize += store.getFlushedCellsSize();
                tempCompactedCellsSize += store.getCompactedCellsSize();
                tempMajorCompactedCellsSize += store.getMajorCompactedCellsSize();
                if (store instanceof HMobStore) {
                    HMobStore mobStore = (HMobStore) store;
                    tempCellsCountCompactedToMob += mobStore.getCellsCountCompactedToMob();
                    tempCellsCountCompactedFromMob += mobStore.getCellsCountCompactedFromMob();
                    tempCellsSizeCompactedToMob += mobStore.getCellsSizeCompactedToMob();
                    tempCellsSizeCompactedFromMob += mobStore.getCellsSizeCompactedFromMob();
                    tempMobFlushCount += mobStore.getMobFlushCount();
                    tempMobFlushedCellsCount += mobStore.getMobFlushedCellsCount();
                    tempMobFlushedCellsSize += mobStore.getMobFlushedCellsSize();
                    tempMobScanCellsCount += mobStore.getMobScanCellsCount();
                    tempMobScanCellsSize += mobStore.getMobScanCellsSize();
                }
            }
            HDFSBlocksDistribution distro = r.getHDFSBlocksDistribution();
            hdfsBlocksDistribution.add(distro);
            if (r.getRegionInfo().getReplicaId() != RegionInfo.DEFAULT_REPLICA_ID) {
                hdfsBlocksDistributionSecondaryRegions.add(distro);
            }
            regionCount++;
        }
        float localityIndex = hdfsBlocksDistribution.getBlockLocalityIndex(regionServer.getServerName().getHostname());
        tempPercentFileLocal = Double.isNaN(tempBlockedRequestsCount) ? 0 : (localityIndex * 100);
        float localityIndexSecondaryRegions = hdfsBlocksDistributionSecondaryRegions.getBlockLocalityIndex(regionServer.getServerName().getHostname());
        tempPercentFileLocalSecondaryRegions = Double.isNaN(localityIndexSecondaryRegions) ? 0 : (localityIndexSecondaryRegions * 100);
        // Compute the number of requests per second
        long currentTime = EnvironmentEdgeManager.currentTime();
        // assume that it took PERIOD seconds to start the executor.
        // this is a guess but it's a pretty good one.
        if (lastRan == 0) {
            lastRan = currentTime - period;
        }
        // If we've time traveled keep the last requests per second.
        if ((currentTime - lastRan) > 0) {
            requestsPerSecond = (totalReadRequestsDelta + totalWriteRequestsDelta) / ((currentTime - lastRan) / 1000.0);
            double readRequestsRatePerMilliSecond = (double) totalReadRequestsDelta / period;
            double writeRequestsRatePerMilliSecond = (double) totalWriteRequestsDelta / period;
            readRequestsRatePerSecond = readRequestsRatePerMilliSecond * 1000.0;
            writeRequestsRatePerSecond = writeRequestsRatePerMilliSecond * 1000.0;
            long intervalStoreFileSize = tempStoreFileSize - lastStoreFileSize;
            storeFileSizeGrowthRate = (double) intervalStoreFileSize * 1000.0 / period;
            lastStoreFileSize = tempStoreFileSize;
        }
        lastRan = currentTime;
        final WALProvider provider = regionServer.getWalFactory().getWALProvider();
        final WALProvider metaProvider = regionServer.getWalFactory().getMetaWALProvider();
        numWALFiles = (provider == null ? 0 : provider.getNumLogFiles()) + (metaProvider == null ? 0 : metaProvider.getNumLogFiles());
        walFileSize = (provider == null ? 0 : provider.getLogFileSize()) + (metaProvider == null ? 0 : metaProvider.getLogFileSize());
        // Copy over computed values so that no thread sees half computed values.
        numStores = tempNumStores;
        numStoreFiles = tempNumStoreFiles;
        memstoreSize = tempMemstoreSize;
        onHeapMemstoreSize = tempOnHeapMemstoreSize;
        offHeapMemstoreSize = tempOffHeapMemstoreSize;
        storeFileSize = tempStoreFileSize;
        maxStoreFileCount = tempMaxStoreFileCount;
        maxStoreFileAge = tempMaxStoreFileAge;
        if (regionCount > 0) {
            averageRegionSize = (memstoreSize + storeFileSize) / regionCount;
        }
        if (tempMinStoreFileAge != Long.MAX_VALUE) {
            minStoreFileAge = tempMinStoreFileAge;
        }
        if (numHFiles != 0) {
            avgStoreFileAge = avgAgeNumerator / numHFiles;
        }
        numReferenceFiles = tempNumReferenceFiles;
        readRequestsCount = tempReadRequestsCount;
        cpRequestsCount = tempCpRequestsCount;
        filteredReadRequestsCount = tempFilteredReadRequestsCount;
        writeRequestsCount = tempWriteRequestsCount;
        checkAndMutateChecksFailed = tempCheckAndMutateChecksFailed;
        checkAndMutateChecksPassed = tempCheckAndMutateChecksPassed;
        storefileIndexSize = tempStorefileIndexSize;
        totalStaticIndexSize = tempTotalStaticIndexSize;
        totalStaticBloomSize = tempTotalStaticBloomSize;
        bloomFilterRequestsCount = tempBloomFilterRequestsCount;
        bloomFilterNegativeResultsCount = tempBloomFilterNegativeResultsCount;
        bloomFilterEligibleRequestsCount = tempBloomFilterEligibleRequestsCount;
        numMutationsWithoutWAL = tempNumMutationsWithoutWAL;
        dataInMemoryWithoutWAL = tempDataInMemoryWithoutWAL;
        percentFileLocal = tempPercentFileLocal;
        percentFileLocalSecondaryRegions = tempPercentFileLocalSecondaryRegions;
        flushedCellsCount = tempFlushedCellsCount;
        compactedCellsCount = tempCompactedCellsCount;
        majorCompactedCellsCount = tempMajorCompactedCellsCount;
        flushedCellsSize = tempFlushedCellsSize;
        compactedCellsSize = tempCompactedCellsSize;
        majorCompactedCellsSize = tempMajorCompactedCellsSize;
        cellsCountCompactedToMob = tempCellsCountCompactedToMob;
        cellsCountCompactedFromMob = tempCellsCountCompactedFromMob;
        cellsSizeCompactedToMob = tempCellsSizeCompactedToMob;
        cellsSizeCompactedFromMob = tempCellsSizeCompactedFromMob;
        mobFlushCount = tempMobFlushCount;
        mobFlushedCellsCount = tempMobFlushedCellsCount;
        mobFlushedCellsSize = tempMobFlushedCellsSize;
        mobScanCellsCount = tempMobScanCellsCount;
        mobScanCellsSize = tempMobScanCellsSize;
        mobFileCacheAccessCount = mobFileCache != null ? mobFileCache.getAccessCount() : 0L;
        mobFileCacheMissCount = mobFileCache != null ? mobFileCache.getMissCount() : 0L;
        mobFileCacheHitRatio = mobFileCache != null ? mobFileCache.getHitRatio() : 0.0;
        if (Double.isNaN(mobFileCacheHitRatio)) {
            mobFileCacheHitRatio = 0.0;
        }
        mobFileCacheEvictedCount = mobFileCache != null ? mobFileCache.getEvictedFileCount() : 0L;
        mobFileCacheCount = mobFileCache != null ? mobFileCache.getCacheSize() : 0;
        blockedRequestsCount = tempBlockedRequestsCount;
    } catch (Throwable e) {
        LOG.warn("Caught exception! Will suppress and retry.", e);
    }
}

@Override
synchronized public void run() {
    try {
        HDFSBlocksDistribution hdfsBlocksDistribution = new HDFSBlocksDistribution();
        HDFSBlocksDistribution hdfsBlocksDistributionSecondaryRegions = new HDFSBlocksDistribution();
        long tempNumStores = 0, tempNumStoreFiles = 0, tempStoreFileSize = 0;
        long tempMemstoreSize = 0, tempOnHeapMemstoreSize = 0, tempOffHeapMemstoreSize = 0;
        long tempMaxStoreFileAge = 0, tempNumReferenceFiles = 0;
        long tempMaxStoreFileCount = 0;
        long avgAgeNumerator = 0, numHFiles = 0;
        long tempMinStoreFileAge = Long.MAX_VALUE;
        long tempFilteredReadRequestsCount = 0, tempCpRequestsCount = 0;
        long tempCheckAndMutateChecksFailed = 0;
        long tempCheckAndMutateChecksPassed = 0;
        long tempStorefileIndexSize = 0;
        long tempTotalStaticIndexSize = 0;
        long tempTotalStaticBloomSize = 0;
        long tempBloomFilterRequestsCount = 0;
        long tempBloomFilterNegativeResultsCount = 0;
        long tempBloomFilterEligibleRequestsCount = 0;
        long tempNumMutationsWithoutWAL = 0;
        long tempDataInMemoryWithoutWAL = 0;
        double tempPercentFileLocal = 0;
        double tempPercentFileLocalSecondaryRegions = 0;
        long tempFlushedCellsCount = 0;
        long tempCompactedCellsCount = 0;
        long tempMajorCompactedCellsCount = 0;
        long tempFlushedCellsSize = 0;
        long tempCompactedCellsSize = 0;
        long tempMajorCompactedCellsSize = 0;
        long tempCellsCountCompactedToMob = 0;
        long tempCellsCountCompactedFromMob = 0;
        long tempCellsSizeCompactedToMob = 0;
        long tempCellsSizeCompactedFromMob = 0;
        long tempMobFlushCount = 0;
        long tempMobFlushedCellsCount = 0;
        long tempMobFlushedCellsSize = 0;
        long tempMobScanCellsCount = 0;
        long tempMobScanCellsSize = 0;
        long tempBlockedRequestsCount = 0;
        int regionCount = 0;
        long tempReadRequestsCount = 0;
        long tempWriteRequestsCount = 0;
        long currentReadRequestsCount = 0;
        long currentWriteRequestsCount = 0;
        long lastReadRequestsCount = 0;
        long lastWriteRequestsCount = 0;
        long readRequestsDelta = 0;
        long writeRequestsDelta = 0;
        long totalReadRequestsDelta = 0;
        long totalWriteRequestsDelta = 0;
        String encodedRegionName;
        for (HRegion r : regionServer.getOnlineRegionsLocalContext()) {
            encodedRegionName = r.getRegionInfo().getEncodedName();
            currentReadRequestsCount = r.getReadRequestsCount();
            currentWriteRequestsCount = r.getWriteRequestsCount();
            if (requestsCountCache.containsKey(encodedRegionName)) {
                lastReadRequestsCount = requestsCountCache.get(encodedRegionName).get(0);
                lastWriteRequestsCount = requestsCountCache.get(encodedRegionName).get(1);
                readRequestsDelta = currentReadRequestsCount - lastReadRequestsCount;
                writeRequestsDelta = currentWriteRequestsCount - lastWriteRequestsCount;
                totalReadRequestsDelta += readRequestsDelta;
                totalWriteRequestsDelta += writeRequestsDelta;
                // Update cache for our next comparision
                requestsCountCache.get(encodedRegionName).set(0, currentReadRequestsCount);
                requestsCountCache.get(encodedRegionName).set(1, currentWriteRequestsCount);
            } else {
                // List[0] -> readRequestCount
                // List[1] -> writeRequestCount
                ArrayList<Long> requests = new ArrayList<Long>(2);
                requests.add(currentReadRequestsCount);
                requests.add(currentWriteRequestsCount);
                requestsCountCache.put(encodedRegionName, requests);
                totalReadRequestsDelta += currentReadRequestsCount;
                totalWriteRequestsDelta += currentWriteRequestsCount;
            }
            tempReadRequestsCount += r.getReadRequestsCount();
            tempWriteRequestsCount += r.getWriteRequestsCount();
            tempNumMutationsWithoutWAL += r.getNumMutationsWithoutWAL();
            tempDataInMemoryWithoutWAL += r.getDataInMemoryWithoutWAL();
            tempCpRequestsCount += r.getCpRequestsCount();
            tempFilteredReadRequestsCount += r.getFilteredReadRequestsCount();
            tempCheckAndMutateChecksFailed += r.getCheckAndMutateChecksFailed();
            tempCheckAndMutateChecksPassed += r.getCheckAndMutateChecksPassed();
            tempBlockedRequestsCount += r.getBlockedRequestsCount();
            List<? extends Store> storeList = r.getStores();
            tempNumStores += storeList.size();
            for (Store store : storeList) {
                tempNumStoreFiles += store.getStorefilesCount();
                tempMemstoreSize += store.getMemStoreSize().getDataSize();
                tempOnHeapMemstoreSize += store.getMemStoreSize().getHeapSize();
                tempOffHeapMemstoreSize += store.getMemStoreSize().getOffHeapSize();
                tempStoreFileSize += store.getStorefilesSize();
                tempMaxStoreFileCount = Math.max(tempMaxStoreFileCount, store.getStorefilesCount());
                OptionalLong storeMaxStoreFileAge = store.getMaxStoreFileAge();
                if (storeMaxStoreFileAge.isPresent() && storeMaxStoreFileAge.getAsLong() > tempMaxStoreFileAge) {
                    tempMaxStoreFileAge = storeMaxStoreFileAge.getAsLong();
                }
                OptionalLong storeMinStoreFileAge = store.getMinStoreFileAge();
                if (storeMinStoreFileAge.isPresent() && storeMinStoreFileAge.getAsLong() < tempMinStoreFileAge) {
                    tempMinStoreFileAge = storeMinStoreFileAge.getAsLong();
                }
                long storeHFiles = store.getNumHFiles();
                numHFiles += storeHFiles;
                tempNumReferenceFiles += store.getNumReferenceFiles();
                OptionalDouble storeAvgStoreFileAge = store.getAvgStoreFileAge();
                if (storeAvgStoreFileAge.isPresent()) {
                    avgAgeNumerator = (long) (avgAgeNumerator + storeAvgStoreFileAge.getAsDouble() * storeHFiles);
                }
                tempStorefileIndexSize += store.getStorefilesRootLevelIndexSize();
                tempTotalStaticBloomSize += store.getTotalStaticBloomSize();
                tempTotalStaticIndexSize += store.getTotalStaticIndexSize();
                tempBloomFilterRequestsCount += store.getBloomFilterRequestsCount();
                tempBloomFilterNegativeResultsCount += store.getBloomFilterNegativeResultsCount();
                tempBloomFilterEligibleRequestsCount += store.getBloomFilterEligibleRequestsCount();
                tempFlushedCellsCount += store.getFlushedCellsCount();
                tempCompactedCellsCount += store.getCompactedCellsCount();
                tempMajorCompactedCellsCount += store.getMajorCompactedCellsCount();
                tempFlushedCellsSize += store.getFlushedCellsSize();
                tempCompactedCellsSize += store.getCompactedCellsSize();
                tempMajorCompactedCellsSize += store.getMajorCompactedCellsSize();
                if (store instanceof HMobStore) {
                    HMobStore mobStore = (HMobStore) store;
                    tempCellsCountCompactedToMob += mobStore.getCellsCountCompactedToMob();
                    tempCellsCountCompactedFromMob += mobStore.getCellsCountCompactedFromMob();
                    tempCellsSizeCompactedToMob += mobStore.getCellsSizeCompactedToMob();
                    tempCellsSizeCompactedFromMob += mobStore.getCellsSizeCompactedFromMob();
                    tempMobFlushCount += mobStore.getMobFlushCount();
                    tempMobFlushedCellsCount += mobStore.getMobFlushedCellsCount();
                    tempMobFlushedCellsSize += mobStore.getMobFlushedCellsSize();
                    tempMobScanCellsCount += mobStore.getMobScanCellsCount();
                    tempMobScanCellsSize += mobStore.getMobScanCellsSize();
                }
            }
            HDFSBlocksDistribution distro = r.getHDFSBlocksDistribution();
            hdfsBlocksDistribution.add(distro);
            if (r.getRegionInfo().getReplicaId() != RegionInfo.DEFAULT_REPLICA_ID) {
                hdfsBlocksDistributionSecondaryRegions.add(distro);
            }
            regionCount++;
        }
        float localityIndex = hdfsBlocksDistribution.getBlockLocalityIndex(regionServer.getServerName().getHostname());
        tempPercentFileLocal = Double.isNaN(tempBlockedRequestsCount) ? 0 : (localityIndex * 100);
        float localityIndexSecondaryRegions = hdfsBlocksDistributionSecondaryRegions.getBlockLocalityIndex(regionServer.getServerName().getHostname());
        tempPercentFileLocalSecondaryRegions = Double.isNaN(localityIndexSecondaryRegions) ? 0 : (localityIndexSecondaryRegions * 100);
        // Compute the number of requests per second
        long currentTime = EnvironmentEdgeManager.currentTime();
        // assume that it took PERIOD seconds to start the executor.
        // this is a guess but it's a pretty good one.
        if (lastRan == 0) {
            lastRan = currentTime - period;
        }
        // If we've time traveled keep the last requests per second.
        if ((currentTime - lastRan) > 0) {
            requestsPerSecond = (totalReadRequestsDelta + totalWriteRequestsDelta) / ((currentTime - lastRan) / 1000.0);
            double readRequestsRatePerMilliSecond = (double) totalReadRequestsDelta / period;
            double writeRequestsRatePerMilliSecond = (double) totalWriteRequestsDelta / period;
            readRequestsRatePerSecond = readRequestsRatePerMilliSecond * 1000.0;
            writeRequestsRatePerSecond = writeRequestsRatePerMilliSecond * 1000.0;
            long intervalStoreFileSize = tempStoreFileSize - lastStoreFileSize;
            storeFileSizeGrowthRate = (double) intervalStoreFileSize * 1000.0 / period;
            lastStoreFileSize = tempStoreFileSize;
        }
        lastRan = currentTime;
        final WALProvider provider = regionServer.getWalFactory().getWALProvider();
        final WALProvider metaProvider = regionServer.getWalFactory().getMetaWALProvider();
        numWALFiles = (provider == null ? 0 : provider.getNumLogFiles()) + (metaProvider == null ? 0 : metaProvider.getNumLogFiles());
        walFileSize = (provider == null ? 0 : provider.getLogFileSize()) + (metaProvider == null ? 0 : metaProvider.getLogFileSize());
        // Copy over computed values so that no thread sees half computed values.
        numStores = tempNumStores;
        numStoreFiles = tempNumStoreFiles;
        memstoreSize = tempMemstoreSize;
        onHeapMemstoreSize = tempOnHeapMemstoreSize;
        offHeapMemstoreSize = tempOffHeapMemstoreSize;
        storeFileSize = tempStoreFileSize;
        maxStoreFileCount = tempMaxStoreFileCount;
        maxStoreFileAge = tempMaxStoreFileAge;
        if (regionCount > 0) {
            averageRegionSize = (memstoreSize + storeFileSize) / regionCount;
        }
        if (tempMinStoreFileAge != Long.MAX_VALUE) {
            minStoreFileAge = tempMinStoreFileAge;
        }
        if (numHFiles != 0) {
            avgStoreFileAge = avgAgeNumerator / numHFiles;
        }
        numReferenceFiles = tempNumReferenceFiles;
        readRequestsCount = tempReadRequestsCount;
        cpRequestsCount = tempCpRequestsCount;
        filteredReadRequestsCount = tempFilteredReadRequestsCount;
        writeRequestsCount = tempWriteRequestsCount;
        checkAndMutateChecksFailed = tempCheckAndMutateChecksFailed;
        checkAndMutateChecksPassed = tempCheckAndMutateChecksPassed;
        storefileIndexSize = tempStorefileIndexSize;
        totalStaticIndexSize = tempTotalStaticIndexSize;
        totalStaticBloomSize = tempTotalStaticBloomSize;
        bloomFilterRequestsCount = tempBloomFilterRequestsCount;
        bloomFilterNegativeResultsCount = tempBloomFilterNegativeResultsCount;
        bloomFilterEligibleRequestsCount = tempBloomFilterEligibleRequestsCount;
        numMutationsWithoutWAL = tempNumMutationsWithoutWAL;
        dataInMemoryWithoutWAL = tempDataInMemoryWithoutWAL;
        percentFileLocal = tempPercentFileLocal;
        percentFileLocalSecondaryRegions = tempPercentFileLocalSecondaryRegions;
        flushedCellsCount = tempFlushedCellsCount;
        compactedCellsCount = tempCompactedCellsCount;
        majorCompactedCellsCount = tempMajorCompactedCellsCount;
        flushedCellsSize = tempFlushedCellsSize;
        compactedCellsSize = tempCompactedCellsSize;
        majorCompactedCellsSize = tempMajorCompactedCellsSize;
        cellsCountCompactedToMob = tempCellsCountCompactedToMob;
        cellsCountCompactedFromMob = tempCellsCountCompactedFromMob;
        cellsSizeCompactedToMob = tempCellsSizeCompactedToMob;
        cellsSizeCompactedFromMob = tempCellsSizeCompactedFromMob;
        mobFlushCount = tempMobFlushCount;
        mobFlushedCellsCount = tempMobFlushedCellsCount;
        mobFlushedCellsSize = tempMobFlushedCellsSize;
        mobScanCellsCount = tempMobScanCellsCount;
        mobScanCellsSize = tempMobScanCellsSize;
        mobFileCacheAccessCount = mobFileCache != null ? mobFileCache.getAccessCount() : 0L;
        mobFileCacheMissCount = mobFileCache != null ? mobFileCache.getMissCount() : 0L;
        mobFileCacheHitRatio = mobFileCache != null ? mobFileCache.getHitRatio() : 0.0;
        if (Double.isNaN(mobFileCacheHitRatio)) {
            mobFileCacheHitRatio = 0.0;
        }
        mobFileCacheEvictedCount = mobFileCache != null ? mobFileCache.getEvictedFileCount() : 0L;
        mobFileCacheCount = mobFileCache != null ? mobFileCache.getCacheSize() : 0;
        blockedRequestsCount = tempBlockedRequestsCount;
    } catch (Throwable e) {
        LOG.warn("Caught exception! Will suppress and retry.", e);
    }
}
possible Hot1
possible type Hot3_2
2
