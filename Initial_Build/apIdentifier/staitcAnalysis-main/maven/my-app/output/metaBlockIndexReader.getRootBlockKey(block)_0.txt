looking:metaBlockIndexReader.getRootBlockKey(block)
// single-level.
synchronized (metaBlockIndexReader.getRootBlockKey(block)) {
    // Check cache for block. If found return.
    long metaBlockOffset = metaBlockIndexReader.getRootBlockOffset(block);
    BlockCacheKey cacheKey = new BlockCacheKey(name, metaBlockOffset, this.isPrimaryReplicaReader(), BlockType.META);
    cacheBlock &= cacheConf.shouldCacheBlockOnRead(BlockType.META.getCategory());
    HFileBlock cachedBlock = getCachedBlock(cacheKey, cacheBlock, false, true, BlockType.META, null);
    if (cachedBlock != null) {
        assert cachedBlock.isUnpacked() : "Packed block leak.";
        // Return a distinct 'shallow copy' of the block,
        // so pos does not get messed by the scanner
        return cachedBlock;
    }
    // Cache Miss, please load.
    HFileBlock compressedBlock = fsBlockReader.readBlockData(metaBlockOffset, blockSize, true, false, true);
    HFileBlock uncompressedBlock = compressedBlock.unpack(hfileContext, fsBlockReader);
    if (compressedBlock != uncompressedBlock) {
        compressedBlock.release();
    }
    // Cache the block
    if (cacheBlock) {
        cacheConf.getBlockCache().ifPresent(cache -> cache.cacheBlock(cacheKey, uncompressedBlock, cacheConf.isInMemory()));
    }
    return uncompressedBlock;
}

// Per meta key from any given file, synchronize reads for said block. This
// is OK to do for meta blocks because the meta block index is always
// single-level.
synchronized (metaBlockIndexReader.getRootBlockKey(block)) {
    // Check cache for block. If found return.
    long metaBlockOffset = metaBlockIndexReader.getRootBlockOffset(block);
    BlockCacheKey cacheKey = new BlockCacheKey(name, metaBlockOffset, this.isPrimaryReplicaReader(), BlockType.META);
    cacheBlock &= cacheConf.shouldCacheBlockOnRead(BlockType.META.getCategory());
    HFileBlock cachedBlock = getCachedBlock(cacheKey, cacheBlock, false, true, BlockType.META, null);
    if (cachedBlock != null) {
        assert cachedBlock.isUnpacked() : "Packed block leak.";
        // Return a distinct 'shallow copy' of the block,
        // so pos does not get messed by the scanner
        return cachedBlock;
    }
    // Cache Miss, please load.
    HFileBlock compressedBlock = fsBlockReader.readBlockData(metaBlockOffset, blockSize, true, false, true);
    HFileBlock uncompressedBlock = compressedBlock.unpack(hfileContext, fsBlockReader);
    if (compressedBlock != uncompressedBlock) {
        compressedBlock.release();
    }
    // Cache the block
    if (cacheBlock) {
        cacheConf.getBlockCache().ifPresent(cache -> cache.cacheBlock(cacheKey, uncompressedBlock, cacheConf.isInMemory()));
    }
    return uncompressedBlock;
}
possible Hot1
