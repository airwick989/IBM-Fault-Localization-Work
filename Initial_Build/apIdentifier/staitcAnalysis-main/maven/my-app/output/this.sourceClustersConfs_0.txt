looking:this.sourceClustersConfs
synchronized (this.sourceClustersConfs) {
    if (sourceClustersConfs.get(replicationClusterId) == null) {
        LOG.info("Loading source cluster FS client conf for cluster " + replicationClusterId);
        // Load only user provided client configurations.
        Configuration sourceClusterConf = new Configuration(false);
        String replicationConfDir = sinkConf.get(HConstants.REPLICATION_CONF_DIR);
        if (replicationConfDir == null) {
            LOG.debug(HConstants.REPLICATION_CONF_DIR + " is not configured.");
            URL resource = HBaseConfiguration.class.getClassLoader().getResource("hbase-site.xml");
            if (resource != null) {
                String path = resource.getPath();
                replicationConfDir = path.substring(0, path.lastIndexOf("/"));
            } else {
                replicationConfDir = System.getenv("HBASE_CONF_DIR");
            }
        }
        File confDir = new File(replicationConfDir, replicationClusterId);
        LOG.info("Loading source cluster " + replicationClusterId + " file system configurations from xml " + "files under directory " + confDir);
        String[] listofConfFiles = FileUtil.list(confDir);
        for (String confFile : listofConfFiles) {
            if (new File(confDir, confFile).isFile() && confFile.endsWith(XML)) {
                // Add all the user provided client conf files
                sourceClusterConf.addResource(new Path(confDir.getPath(), confFile));
            }
        }
        this.sourceClustersConfs.put(replicationClusterId, sourceClusterConf);
    }
}

synchronized (this.sourceClustersConfs) {
    if (sourceClustersConfs.get(replicationClusterId) == null) {
        LOG.info("Loading source cluster FS client conf for cluster " + replicationClusterId);
        // Load only user provided client configurations.
        Configuration sourceClusterConf = new Configuration(false);
        String replicationConfDir = sinkConf.get(HConstants.REPLICATION_CONF_DIR);
        if (replicationConfDir == null) {
            LOG.debug(HConstants.REPLICATION_CONF_DIR + " is not configured.");
            URL resource = HBaseConfiguration.class.getClassLoader().getResource("hbase-site.xml");
            if (resource != null) {
                String path = resource.getPath();
                replicationConfDir = path.substring(0, path.lastIndexOf("/"));
            } else {
                replicationConfDir = System.getenv("HBASE_CONF_DIR");
            }
        }
        File confDir = new File(replicationConfDir, replicationClusterId);
        LOG.info("Loading source cluster " + replicationClusterId + " file system configurations from xml " + "files under directory " + confDir);
        String[] listofConfFiles = FileUtil.list(confDir);
        for (String confFile : listofConfFiles) {
            if (new File(confDir, confFile).isFile() && confFile.endsWith(XML)) {
                // Add all the user provided client conf files
                sourceClusterConf.addResource(new Path(confDir.getPath(), confFile));
            }
        }
        this.sourceClustersConfs.put(replicationClusterId, sourceClusterConf);
    }
}
possible Hot1
possible type Hot3_2
1
