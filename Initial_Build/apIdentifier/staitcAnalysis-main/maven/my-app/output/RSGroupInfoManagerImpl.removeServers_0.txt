looking:RSGroupInfoManagerImpl.removeServers
RSGroupInfoManagerImpl	removeServers
-----------------------
@Override
public synchronized void removeServers(Set<Address> servers) throws IOException {
    if (servers == null || servers.isEmpty()) {
        throw new ConstraintException("The set of servers to remove cannot be null or empty.");
    }
    // check the set of servers
    checkForDeadOrOnlineServers(servers);
    Map<String, RSGroupInfo> rsGroupInfos = new HashMap<String, RSGroupInfo>();
    for (Address el : servers) {
        RSGroupInfo rsGroupInfo = getRSGroupOfServer(el);
        if (rsGroupInfo != null) {
            RSGroupInfo newRsGroupInfo = rsGroupInfos.get(rsGroupInfo.getName());
            if (newRsGroupInfo == null) {
                rsGroupInfo.removeServer(el);
                rsGroupInfos.put(rsGroupInfo.getName(), rsGroupInfo);
            } else {
                newRsGroupInfo.removeServer(el);
                rsGroupInfos.put(newRsGroupInfo.getName(), newRsGroupInfo);
            }
        } else {
            LOG.warn("Server " + el + " does not belong to any rsgroup.");
        }
    }
    if (rsGroupInfos.size() > 0) {
        Map<String, RSGroupInfo> newGroupMap = Maps.newHashMap(holder.groupName2Group);
        newGroupMap.putAll(rsGroupInfos);
        flushConfig(newGroupMap);
    }
    LOG.info("Remove decommissioned servers {} from RSGroup done", servers);
}
-----------------------
@Override
public synchronized void removeServers(Set<Address> servers) throws IOException {
    if (servers == null || servers.isEmpty()) {
        throw new ConstraintException("The set of servers to remove cannot be null or empty.");
    }
    // check the set of servers
    checkForDeadOrOnlineServers(servers);
    Map<String, RSGroupInfo> rsGroupInfos = new HashMap<String, RSGroupInfo>();
    for (Address el : servers) {
        RSGroupInfo rsGroupInfo = getRSGroupOfServer(el);
        if (rsGroupInfo != null) {
            RSGroupInfo newRsGroupInfo = rsGroupInfos.get(rsGroupInfo.getName());
            if (newRsGroupInfo == null) {
                rsGroupInfo.removeServer(el);
                rsGroupInfos.put(rsGroupInfo.getName(), rsGroupInfo);
            } else {
                newRsGroupInfo.removeServer(el);
                rsGroupInfos.put(newRsGroupInfo.getName(), newRsGroupInfo);
            }
        } else {
            LOG.warn("Server " + el + " does not belong to any rsgroup.");
        }
    }
    if (rsGroupInfos.size() > 0) {
        Map<String, RSGroupInfo> newGroupMap = Maps.newHashMap(holder.groupName2Group);
        newGroupMap.putAll(rsGroupInfos);
        flushConfig(newGroupMap);
    }
    LOG.info("Remove decommissioned servers {} from RSGroup done", servers);
    {
        // This ugliness is because we only have Address, not ServerName.
        Set<Address> onlineServers = new HashSet<>();
        List<ServerName> drainingServers = masterServices.getServerManager().getDrainingServersList();
        for (ServerName server : masterServices.getServerManager().getOnlineServers().keySet()) {
            // Only online but not decommissioned servers are really online
            if (!drainingServers.contains(server)) {
                onlineServers.add(server.getAddress());
            }
        }
        Set<Address> deadServers = new HashSet<>();
        for (ServerName server : masterServices.getServerManager().getDeadServers().copyServerNames()) {
            deadServers.add(server.getAddress());
        }
        for (Address address : servers) {
            if (onlineServers.contains(address)) {
                throw new DoNotRetryIOException("Server " + address + " is an online server, not allowed to remove.");
            }
            if (deadServers.contains(address)) {
                throw new DoNotRetryIOException("Server " + address + " is on the dead servers list," + " Maybe it will come back again, not allowed to remove.");
            }
        }
    }
}-----------------------
possible Hot1
possible type Hot3_2
1
