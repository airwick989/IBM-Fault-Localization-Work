looking:SnapshotManager.sanityCheckBeforeSnapshot
/**
 * Check if the snapshot can be taken. Currently we have some limitations, for zk-coordinated
 * snapshot, we don't allow snapshot with same name or taking multiple snapshots of a table at the
 * same time, for procedure-coordinated snapshot, we don't allow snapshot with same name.
 * @param snapshot   description of the snapshot being checked.
 * @param checkTable check if the table is already taking a snapshot. For zk-coordinated snapshot,
 *                   we need to check if another zk-coordinated snapshot is in progress, for the
 *                   snapshot procedure, this is unnecessary.
 * @return the table descriptor of the table
 */
private synchronized TableDescriptor sanityCheckBeforeSnapshot(SnapshotDescription snapshot, boolean checkTable) throws IOException {
    {
        try {
            final Path snapshotDir = SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshot, rootDir);
            FileSystem fs = master.getMasterFileSystem().getFileSystem();
            // check to see if the snapshot already exists
            return fs.exists(snapshotDir);
        } catch (IllegalArgumentException iae) {
            throw new UnknownSnapshotException("Unexpected exception thrown", iae);
        }
    }
    {
        cleanupSentinels(this.snapshotHandlers);
        {
            ProcedureExecutor<MasterProcedureEnv> procExec = master.getMasterProcedureExecutor();
            Iterator<Map.Entry<SnapshotDescription, Long>> it = snapshotToProcIdMap.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry<SnapshotDescription, Long> entry = it.next();
                Long procId = entry.getValue();
                if (procExec.isRunning() && procExec.isFinished(procId)) {
                    it.remove();
                }
            }
        }
        cleanupCompletedSnapshotInMap();
    }
    {
        Long procId = this.restoreTableToProcIdMap.get(tableName);
        if (procId == null) {
            return false;
        }
        ProcedureExecutor<MasterProcedureEnv> procExec = master.getMasterProcedureExecutor();
        if (procExec.isRunning() && !procExec.isFinished(procId)) {
            return true;
        } else {
            this.restoreTableToProcIdMap.remove(tableName);
            return false;
        }
    }
    TableName snapshotTable = TableName.valueOf(snapshot.getTable());
    // make sure we aren't already running a snapshot
    if (isTakingSnapshot(snapshot, checkTable)) {
        throw new SnapshotCreationException("Rejected taking " + ClientSnapshotDescriptionUtils.toString(snapshot) + " because we are already running another snapshot" + " on the same table or with the same name");
    }
    // make sure we aren't running a restore on the same table
    if (isRestoringTable(snapshotTable)) {
        throw new SnapshotCreationException("Rejected taking " + ClientSnapshotDescriptionUtils.toString(snapshot) + " because we are already have a restore in progress on the same snapshot.");
    }
    // check to see if the table exists
    TableDescriptor desc = null;
    try {
        desc = master.getTableDescriptors().get(TableName.valueOf(snapshot.getTable()));
    } catch (FileNotFoundException e) {
        String msg = "Table:" + snapshot.getTable() + " info doesn't exist!";
        LOG.error(msg);
        throw new SnapshotCreationException(msg, e, ProtobufUtil.createSnapshotDesc(snapshot));
    } catch (IOException e) {
        throw new SnapshotCreationException("Error while geting table description for table " + snapshot.getTable(), e, ProtobufUtil.createSnapshotDesc(snapshot));
    }
    if (desc == null) {
        throw new SnapshotCreationException("Table '" + snapshot.getTable() + "' doesn't exist, can't take snapshot.", ProtobufUtil.createSnapshotDesc(snapshot));
    }
    return desc;
}

/**
 * Check if the snapshot can be taken. Currently we have some limitations, for zk-coordinated
 * snapshot, we don't allow snapshot with same name or taking multiple snapshots of a table at the
 * same time, for procedure-coordinated snapshot, we don't allow snapshot with same name.
 * @param snapshot   description of the snapshot being checked.
 * @param checkTable check if the table is already taking a snapshot. For zk-coordinated snapshot,
 *                   we need to check if another zk-coordinated snapshot is in progress, for the
 *                   snapshot procedure, this is unnecessary.
 * @return the table descriptor of the table
 */
private synchronized TableDescriptor sanityCheckBeforeSnapshot(SnapshotDescription snapshot, boolean checkTable) throws IOException {
    // check to see if we already completed the snapshot
    if (isSnapshotCompleted(snapshot)) {
        throw new SnapshotExistsException("Snapshot '" + snapshot.getName() + "' already stored on the filesystem.", ProtobufUtil.createSnapshotDesc(snapshot));
    }
    LOG.debug("No existing snapshot, attempting snapshot...");
    // stop tracking "abandoned" handlers
    cleanupSentinels();
    TableName snapshotTable = TableName.valueOf(snapshot.getTable());
    // make sure we aren't already running a snapshot
    if (isTakingSnapshot(snapshot, checkTable)) {
        throw new SnapshotCreationException("Rejected taking " + ClientSnapshotDescriptionUtils.toString(snapshot) + " because we are already running another snapshot" + " on the same table or with the same name");
    }
    // make sure we aren't running a restore on the same table
    if (isRestoringTable(snapshotTable)) {
        throw new SnapshotCreationException("Rejected taking " + ClientSnapshotDescriptionUtils.toString(snapshot) + " because we are already have a restore in progress on the same snapshot.");
    }
    // check to see if the table exists
    TableDescriptor desc = null;
    try {
        desc = master.getTableDescriptors().get(TableName.valueOf(snapshot.getTable()));
    } catch (FileNotFoundException e) {
        String msg = "Table:" + snapshot.getTable() + " info doesn't exist!";
        LOG.error(msg);
        throw new SnapshotCreationException(msg, e, ProtobufUtil.createSnapshotDesc(snapshot));
    } catch (IOException e) {
        throw new SnapshotCreationException("Error while geting table description for table " + snapshot.getTable(), e, ProtobufUtil.createSnapshotDesc(snapshot));
    }
    if (desc == null) {
        throw new SnapshotCreationException("Table '" + snapshot.getTable() + "' doesn't exist, can't take snapshot.", ProtobufUtil.createSnapshotDesc(snapshot));
    }
    return desc;
}
possible Hot1
possible type Hot3_2
1
