looking:ServerCall.setResponse
@Override
public synchronized void setResponse(Message m, final CellScanner cells, Throwable t, String errorMsg) {
    if (this.isError) {
        return;
    }
    if (t != null) {
        this.isError = true;
        TraceUtil.setError(span, t);
    } else {
        span.setStatus(StatusCode.OK);
    }
    BufferChain bc = null;
    try {
        ResponseHeader.Builder headerBuilder = ResponseHeader.newBuilder();
        // Call id.
        headerBuilder.setCallId(this.id);
        if (t != null) {
            {
                ExceptionResponse.Builder exceptionBuilder = ExceptionResponse.newBuilder();
                exceptionBuilder.setExceptionClassName(t.getClass().getName());
                exceptionBuilder.setStackTrace(errorMsg);
                exceptionBuilder.setDoNotRetry(t instanceof DoNotRetryIOException);
                if (t instanceof RegionMovedException) {
                    // Special casing for this exception. This is only one carrying a payload.
                    // Do this instead of build a generic system for allowing exceptions carry
                    // any kind of payload.
                    RegionMovedException rme = (RegionMovedException) t;
                    exceptionBuilder.setHostname(rme.getHostname());
                    exceptionBuilder.setPort(rme.getPort());
                } else if (t instanceof HBaseServerException) {
                    HBaseServerException hse = (HBaseServerException) t;
                    exceptionBuilder.setServerOverloaded(hse.isServerOverloaded());
                }
                // Set the exception as the result of the method invocation.
                headerBuilder.setException(exceptionBuilder.build());
            }
        }
        // Pass reservoir to buildCellBlock. Keep reference to returne so can add it back to the
        // reservoir when finished. This is hacky and the hack is not contained but benefits are
        // high when we can avoid a big buffer allocation on each rpc.
        List<ByteBuffer> cellBlock = null;
        int cellBlockSize = 0;
        if (bbAllocator.isReservoirEnabled()) {
            this.cellBlockStream = this.cellBlockBuilder.buildCellBlockStream(this.connection.codec, this.connection.compressionCodec, cells, bbAllocator);
            if (this.cellBlockStream != null) {
                cellBlock = this.cellBlockStream.getByteBuffers();
                cellBlockSize = this.cellBlockStream.size();
            }
        } else {
            ByteBuffer b = this.cellBlockBuilder.buildCellBlock(this.connection.codec, this.connection.compressionCodec, cells);
            if (b != null) {
                cellBlockSize = b.remaining();
                cellBlock = new ArrayList<>(1);
                cellBlock.add(b);
            }
        }
        if (cellBlockSize > 0) {
            CellBlockMeta.Builder cellBlockBuilder = CellBlockMeta.newBuilder();
            // Presumes the cellBlock bytebuffer has been flipped so limit has total size in it.
            cellBlockBuilder.setLength(cellBlockSize);
            headerBuilder.setCellBlockMeta(cellBlockBuilder.build());
        }
        Message header = headerBuilder.build();
        ByteBuffer headerBuf = createHeaderAndMessageBytes(m, header, cellBlockSize, cellBlock);
        ByteBuffer[] responseBufs = null;
        int cellBlockBufferSize = 0;
        if (cellBlock != null) {
            cellBlockBufferSize = cellBlock.size();
            responseBufs = new ByteBuffer[1 + cellBlockBufferSize];
        } else {
            responseBufs = new ByteBuffer[1];
        }
        responseBufs[0] = headerBuf;
        if (cellBlock != null) {
            for (int i = 0; i < cellBlockBufferSize; i++) {
                responseBufs[i + 1] = cellBlock.get(i);
            }
        }
        bc = new BufferChain(responseBufs);
    } catch (IOException e) {
        RpcServer.LOG.warn("Exception while creating response " + e);
    }
    this.response = bc;
    // Once a response message is created and set to this.response, this Call can be treated as
    // done. The Responder thread will do the n/w write of this message back to client.
    if (this.rpcCallback != null) {
        try (Scope ignored = span.makeCurrent()) {
            this.rpcCallback.run();
        } catch (Exception e) {
            // Don't allow any exception here to kill this handler thread.
            RpcServer.LOG.warn("Exception while running the Rpc Callback.", e);
            TraceUtil.setError(span, e);
        }
    }
}

@Override
public synchronized void setResponse(Message m, final CellScanner cells, Throwable t, String errorMsg) {
    if (this.isError) {
        return;
    }
    if (t != null) {
        this.isError = true;
        TraceUtil.setError(span, t);
    } else {
        span.setStatus(StatusCode.OK);
    }
    BufferChain bc = null;
    try {
        ResponseHeader.Builder headerBuilder = ResponseHeader.newBuilder();
        // Call id.
        headerBuilder.setCallId(this.id);
        if (t != null) {
            setExceptionResponse(t, errorMsg, headerBuilder);
        }
        // Pass reservoir to buildCellBlock. Keep reference to returne so can add it back to the
        // reservoir when finished. This is hacky and the hack is not contained but benefits are
        // high when we can avoid a big buffer allocation on each rpc.
        List<ByteBuffer> cellBlock = null;
        int cellBlockSize = 0;
        if (bbAllocator.isReservoirEnabled()) {
            this.cellBlockStream = this.cellBlockBuilder.buildCellBlockStream(this.connection.codec, this.connection.compressionCodec, cells, bbAllocator);
            if (this.cellBlockStream != null) {
                cellBlock = this.cellBlockStream.getByteBuffers();
                cellBlockSize = this.cellBlockStream.size();
            }
        } else {
            ByteBuffer b = this.cellBlockBuilder.buildCellBlock(this.connection.codec, this.connection.compressionCodec, cells);
            if (b != null) {
                cellBlockSize = b.remaining();
                cellBlock = new ArrayList<>(1);
                cellBlock.add(b);
            }
        }
        if (cellBlockSize > 0) {
            CellBlockMeta.Builder cellBlockBuilder = CellBlockMeta.newBuilder();
            // Presumes the cellBlock bytebuffer has been flipped so limit has total size in it.
            cellBlockBuilder.setLength(cellBlockSize);
            headerBuilder.setCellBlockMeta(cellBlockBuilder.build());
        }
        Message header = headerBuilder.build();
        ByteBuffer headerBuf = createHeaderAndMessageBytes(m, header, cellBlockSize, cellBlock);
        ByteBuffer[] responseBufs = null;
        int cellBlockBufferSize = 0;
        if (cellBlock != null) {
            cellBlockBufferSize = cellBlock.size();
            responseBufs = new ByteBuffer[1 + cellBlockBufferSize];
        } else {
            responseBufs = new ByteBuffer[1];
        }
        responseBufs[0] = headerBuf;
        if (cellBlock != null) {
            for (int i = 0; i < cellBlockBufferSize; i++) {
                responseBufs[i + 1] = cellBlock.get(i);
            }
        }
        bc = new BufferChain(responseBufs);
    } catch (IOException e) {
        RpcServer.LOG.warn("Exception while creating response " + e);
    }
    this.response = bc;
    // Once a response message is created and set to this.response, this Call can be treated as
    // done. The Responder thread will do the n/w write of this message back to client.
    if (this.rpcCallback != null) {
        try (Scope ignored = span.makeCurrent()) {
            this.rpcCallback.run();
        } catch (Exception e) {
            // Don't allow any exception here to kill this handler thread.
            RpcServer.LOG.warn("Exception while running the Rpc Callback.", e);
            TraceUtil.setError(span, e);
        }
    }
}
possible Hot1
possible type Hot3_2
1
