looking:oldsources
// synchronized on oldsources to avoid adding recovered source for the to-be-removed peer
synchronized (oldsources) {
    peer = replicationPeers.getPeer(src.getPeerId());
    if (peer == null || peer != oldPeer) {
        src.terminate("Recovered queue doesn't belong to any current peer");
        deleteQueue(queueId);
        return;
    }
    // Do not setup recovered queue if a sync replication peer is in STANDBY state, or is
    // transiting to STANDBY state. The only exception is we are in STANDBY state and
    // transiting to DA, under this state we will replay the remote WAL and they need to be
    // replicated back.
    if (peer.getPeerConfig().isSyncReplication()) {
        Pair<SyncReplicationState, SyncReplicationState> stateAndNewState = peer.getSyncReplicationStateAndNewState();
        if ((stateAndNewState.getFirst().equals(SyncReplicationState.STANDBY) && stateAndNewState.getSecond().equals(SyncReplicationState.NONE)) || stateAndNewState.getSecond().equals(SyncReplicationState.STANDBY)) {
            src.terminate("Sync replication peer is in STANDBY state");
            deleteQueue(queueId);
            return;
        }
    }
    // track sources in walsByIdRecoveredQueues
    Map<String, NavigableSet<String>> walsByGroup = new HashMap<>();
    walsByIdRecoveredQueues.put(queueId, walsByGroup);
    for (String wal : walsSet) {
        String walPrefix = AbstractFSWALProvider.getWALPrefixFromWALName(wal);
        NavigableSet<String> wals = walsByGroup.get(walPrefix);
        if (wals == null) {
            wals = new TreeSet<>();
            walsByGroup.put(walPrefix, wals);
        }
        wals.add(wal);
    }
    oldsources.add(src);
    LOG.info("Added source for recovered queue {}", src.getQueueId());
    for (String wal : walsSet) {
        LOG.trace("Enqueueing log from recovered queue for source: " + src.getQueueId());
        src.enqueueLog(new Path(oldLogDir, wal));
    }
    src.startup();
}

// synchronized on oldsources to avoid adding recovered source for the to-be-removed peer
synchronized (oldsources) {
    peer = replicationPeers.getPeer(src.getPeerId());
    if (peer == null || peer != oldPeer) {
        src.terminate("Recovered queue doesn't belong to any current peer");
        deleteQueue(queueId);
        return;
    }
    // Do not setup recovered queue if a sync replication peer is in STANDBY state, or is
    // transiting to STANDBY state. The only exception is we are in STANDBY state and
    // transiting to DA, under this state we will replay the remote WAL and they need to be
    // replicated back.
    if (peer.getPeerConfig().isSyncReplication()) {
        Pair<SyncReplicationState, SyncReplicationState> stateAndNewState = peer.getSyncReplicationStateAndNewState();
        if ((stateAndNewState.getFirst().equals(SyncReplicationState.STANDBY) && stateAndNewState.getSecond().equals(SyncReplicationState.NONE)) || stateAndNewState.getSecond().equals(SyncReplicationState.STANDBY)) {
            src.terminate("Sync replication peer is in STANDBY state");
            deleteQueue(queueId);
            return;
        }
    }
    // track sources in walsByIdRecoveredQueues
    Map<String, NavigableSet<String>> walsByGroup = new HashMap<>();
    walsByIdRecoveredQueues.put(queueId, walsByGroup);
    for (String wal : walsSet) {
        String walPrefix = AbstractFSWALProvider.getWALPrefixFromWALName(wal);
        NavigableSet<String> wals = walsByGroup.get(walPrefix);
        if (wals == null) {
            wals = new TreeSet<>();
            walsByGroup.put(walPrefix, wals);
        }
        wals.add(wal);
    }
    oldsources.add(src);
    LOG.info("Added source for recovered queue {}", src.getQueueId());
    for (String wal : walsSet) {
        LOG.trace("Enqueueing log from recovered queue for source: " + src.getQueueId());
        src.enqueueLog(new Path(oldLogDir, wal));
    }
    src.startup();
}
possible Hot2
possible type Hot3_2
1
