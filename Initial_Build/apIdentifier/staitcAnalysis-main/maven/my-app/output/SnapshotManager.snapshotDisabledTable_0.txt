looking:SnapshotManager.snapshotDisabledTable
SnapshotManager	snapshotDisabledTable
-----------------------
/**
 * Take a snapshot of a disabled table.
 * @param snapshot description of the snapshot to take. Modified to be {@link Type#DISABLED}.
 * @throws IOException if the snapshot could not be started or filesystem for snapshot temporary
 *                     directory could not be determined
 */
private synchronized void snapshotDisabledTable(SnapshotDescription snapshot) throws IOException {
    // setup the snapshot
    prepareWorkingDirectory(snapshot);
    // set the snapshot to be a disabled snapshot, since the client doesn't know about that
    snapshot = snapshot.toBuilder().setType(Type.DISABLED).build();
    // Take the snapshot of the disabled table
    DisabledTableSnapshotHandler handler = new DisabledTableSnapshotHandler(snapshot, master, this);
    snapshotTable(snapshot, handler);
}
-----------------------
/**
 * Take a snapshot of a disabled table.
 * @param snapshot description of the snapshot to take. Modified to be {@link Type#DISABLED}.
 * @throws IOException if the snapshot could not be started or filesystem for snapshot temporary
 *                     directory could not be determined
 */
private synchronized void snapshotDisabledTable(SnapshotDescription snapshot) throws IOException {
    // setup the snapshot
    prepareWorkingDirectory(snapshot);
    // set the snapshot to be a disabled snapshot, since the client doesn't know about that
    snapshot = snapshot.toBuilder().setType(Type.DISABLED).build();
    // Take the snapshot of the disabled table
    DisabledTableSnapshotHandler handler = new DisabledTableSnapshotHandler(snapshot, master, this);
    snapshotTable(snapshot, handler);
    {
        Path workingDir = SnapshotDescriptionUtils.getWorkingSnapshotDir(snapshot, rootDir, master.getConfiguration());
        try {
            FileSystem workingDirFS = workingDir.getFileSystem(master.getConfiguration());
            // delete the working directory, since we aren't running the snapshot. Likely leftovers
            // from a failed attempt.
            workingDirFS.delete(workingDir, true);
            // recreate the working directory for the snapshot
            if (!workingDirFS.mkdirs(workingDir)) {
                throw new SnapshotCreationException("Couldn't create working directory (" + workingDir + ") for snapshot", ProtobufUtil.createSnapshotDesc(snapshot));
            }
        } catch (HBaseSnapshotException e) {
            throw e;
        } catch (IOException e) {
            throw new SnapshotCreationException("Exception while checking to see if snapshot could be started.", e, ProtobufUtil.createSnapshotDesc(snapshot));
        }
    }
    {
        try {
            handler.prepare();
            this.executorService.submit(handler);
            this.snapshotHandlers.put(TableName.valueOf(snapshot.getTable()), handler);
        } catch (Exception e) {
            // cleanup the working directory by trying to delete it from the fs.
            Path workingDir = SnapshotDescriptionUtils.getWorkingSnapshotDir(snapshot, rootDir, master.getConfiguration());
            FileSystem workingDirFs = workingDir.getFileSystem(master.getConfiguration());
            try {
                if (!workingDirFs.delete(workingDir, true)) {
                    LOG.error("Couldn't delete working directory (" + workingDir + " for snapshot:" + ClientSnapshotDescriptionUtils.toString(snapshot));
                }
            } catch (IOException e1) {
                LOG.error("Couldn't delete working directory (" + workingDir + " for snapshot:" + ClientSnapshotDescriptionUtils.toString(snapshot));
            }
            // fail the snapshot
            throw new SnapshotCreationException("Could not build snapshot handler", e, ProtobufUtil.createSnapshotDesc(snapshot));
        }
    }
}-----------------------
possible Hot1
