looking:HStore.closeAndArchiveCompactedFiles
HStore	closeAndArchiveCompactedFiles
-----------------------
/**
 * Closes and archives the compacted files under this store
 */
public synchronized void closeAndArchiveCompactedFiles() throws IOException {
    // ensure other threads do not attempt to archive the same files on close()
    archiveLock.lock();
    try {
        storeEngine.readLock();
        Collection<HStoreFile> copyCompactedfiles = null;
        try {
            Collection<HStoreFile> compactedfiles = this.getStoreEngine().getStoreFileManager().getCompactedfiles();
            if (CollectionUtils.isNotEmpty(compactedfiles)) {
                // Do a copy under read lock
                copyCompactedfiles = new ArrayList<>(compactedfiles);
            } else {
                LOG.trace("No compacted files to archive");
            }
        } finally {
            storeEngine.readUnlock();
        }
        if (CollectionUtils.isNotEmpty(copyCompactedfiles)) {
            removeCompactedfiles(copyCompactedfiles, true);
        }
    } finally {
        archiveLock.unlock();
    }
}
-----------------------
/**
 * Closes and archives the compacted files under this store
 */
public synchronized void closeAndArchiveCompactedFiles() throws IOException {
    // ensure other threads do not attempt to archive the same files on close()
    archiveLock.lock();
    try {
        storeEngine.readLock();
        Collection<HStoreFile> copyCompactedfiles = null;
        try {
            Collection<HStoreFile> compactedfiles = this.getStoreEngine().getStoreFileManager().getCompactedfiles();
            if (CollectionUtils.isNotEmpty(compactedfiles)) {
                // Do a copy under read lock
                copyCompactedfiles = new ArrayList<>(compactedfiles);
            } else {
                LOG.trace("No compacted files to archive");
            }
        } finally {
            storeEngine.readUnlock();
        }
        if (CollectionUtils.isNotEmpty(copyCompactedfiles)) {
            removeCompactedfiles(copyCompactedfiles, true);
        }
    } finally {
        archiveLock.unlock();
    }
}-----------------------
possible Hot1
