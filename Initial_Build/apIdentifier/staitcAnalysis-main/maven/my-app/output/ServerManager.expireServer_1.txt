looking:ServerManager.expireServer
synchronized long expireServer(final ServerName serverName, boolean force) {
    // THIS server is going down... can't handle our own expiration.
    if (serverName.equals(master.getServerName())) {
        if (!(master.isAborted() || master.isStopped())) {
            {
                if (flushedSeqIdFlusher != null) {
                    flushedSeqIdFlusher.shutdown();
                }
                if (persistFlushedSequenceId) {
                    try {
                        {
                            if (isFlushSeqIdPersistInProgress) {
                                return;
                            }
                            isFlushSeqIdPersistInProgress = true;
                            try {
                                Configuration conf = master.getConfiguration();
                                Path rootDir = CommonFSUtils.getRootDir(conf);
                                Path lastFlushedSeqIdPath = new Path(rootDir, LAST_FLUSHED_SEQ_ID_FILE);
                                FileSystem fs = FileSystem.get(conf);
                                if (fs.exists(lastFlushedSeqIdPath)) {
                                    LOG.info("Rewriting .lastflushedseqids file at: " + lastFlushedSeqIdPath);
                                    if (!fs.delete(lastFlushedSeqIdPath, false)) {
                                        throw new IOException("Unable to remove existing " + lastFlushedSeqIdPath);
                                    }
                                } else {
                                    LOG.info("Writing .lastflushedseqids file at: " + lastFlushedSeqIdPath);
                                }
                                FSDataOutputStream out = fs.create(lastFlushedSeqIdPath);
                                FlushedSequenceId.Builder flushedSequenceIdBuilder = FlushedSequenceId.newBuilder();
                                try {
                                    for (Entry<byte[], Long> entry : flushedSequenceIdByRegion.entrySet()) {
                                        FlushedRegionSequenceId.Builder flushedRegionSequenceIdBuilder = FlushedRegionSequenceId.newBuilder();
                                        flushedRegionSequenceIdBuilder.setRegionEncodedName(ByteString.copyFrom(entry.getKey()));
                                        flushedRegionSequenceIdBuilder.setSeqId(entry.getValue());
                                        ConcurrentNavigableMap<byte[], Long> storeSeqIds = storeFlushedSequenceIdsByRegion.get(entry.getKey());
                                        if (storeSeqIds != null) {
                                            for (Entry<byte[], Long> store : storeSeqIds.entrySet()) {
                                                FlushedStoreSequenceId.Builder flushedStoreSequenceIdBuilder = FlushedStoreSequenceId.newBuilder();
                                                flushedStoreSequenceIdBuilder.setFamily(ByteString.copyFrom(store.getKey()));
                                                flushedStoreSequenceIdBuilder.setSeqId(store.getValue());
                                                flushedRegionSequenceIdBuilder.addStores(flushedStoreSequenceIdBuilder);
                                            }
                                        }
                                        flushedSequenceIdBuilder.addRegionSequenceId(flushedRegionSequenceIdBuilder);
                                    }
                                    flushedSequenceIdBuilder.build().writeDelimitedTo(out);
                                } finally {
                                    if (out != null) {
                                        out.close();
                                    }
                                }
                            } finally {
                                isFlushSeqIdPersistInProgress = false;
                            }
                        }
                    } catch (IOException e) {
                        LOG.warn("Failed to persist last flushed sequence id of regions" + " to file system", e);
                    }
                }
            }
        }
        return Procedure.NO_PROC_ID;
    }
    if (this.deadservers.isDeadServer(serverName)) {
        LOG.warn("Expiration called on {} but already in DeadServer", serverName);
        return Procedure.NO_PROC_ID;
    }
    {
        synchronized (this.onlineServers) {
            boolean online = this.onlineServers.containsKey(sn);
            if (online) {
                // Remove the server from the known servers lists and update load info BUT
                // add to deadservers first; do this so it'll show in dead servers list if
                // not in online servers list.
                this.deadservers.putIfAbsent(sn);
                this.onlineServers.remove(sn);
                onlineServers.notifyAll();
            } else {
                // If not online, that is odd but may happen if 'Unknown Servers' -- where meta
                // has references to servers not online nor in dead servers list. If
                // 'Unknown Server', don't add to DeadServers else will be there for ever.
                LOG.trace("Expiration of {} but server not online", sn);
            }
        }
    }
    {
        return this.clusterShutdown.get();
    }
    // If server is in draining mode, remove corresponding znode
    // If cluster is going down, yes, servers are going to be expiring; don't
    // process as a dead server
    if (isClusterShutdown()) {
        LOG.info("Cluster shutdown set; " + serverName + " expired; onlineServers=" + this.onlineServers.size());
        if (this.onlineServers.isEmpty()) {
            {
                if (flushedSeqIdFlusher != null) {
                    flushedSeqIdFlusher.shutdown();
                }
                if (persistFlushedSequenceId) {
                    try {
                        {
                            if (isFlushSeqIdPersistInProgress) {
                                return;
                            }
                            isFlushSeqIdPersistInProgress = true;
                            try {
                                Configuration conf = master.getConfiguration();
                                Path rootDir = CommonFSUtils.getRootDir(conf);
                                Path lastFlushedSeqIdPath = new Path(rootDir, LAST_FLUSHED_SEQ_ID_FILE);
                                FileSystem fs = FileSystem.get(conf);
                                if (fs.exists(lastFlushedSeqIdPath)) {
                                    LOG.info("Rewriting .lastflushedseqids file at: " + lastFlushedSeqIdPath);
                                    if (!fs.delete(lastFlushedSeqIdPath, false)) {
                                        throw new IOException("Unable to remove existing " + lastFlushedSeqIdPath);
                                    }
                                } else {
                                    LOG.info("Writing .lastflushedseqids file at: " + lastFlushedSeqIdPath);
                                }
                                FSDataOutputStream out = fs.create(lastFlushedSeqIdPath);
                                FlushedSequenceId.Builder flushedSequenceIdBuilder = FlushedSequenceId.newBuilder();
                                try {
                                    for (Entry<byte[], Long> entry : flushedSequenceIdByRegion.entrySet()) {
                                        FlushedRegionSequenceId.Builder flushedRegionSequenceIdBuilder = FlushedRegionSequenceId.newBuilder();
                                        flushedRegionSequenceIdBuilder.setRegionEncodedName(ByteString.copyFrom(entry.getKey()));
                                        flushedRegionSequenceIdBuilder.setSeqId(entry.getValue());
                                        ConcurrentNavigableMap<byte[], Long> storeSeqIds = storeFlushedSequenceIdsByRegion.get(entry.getKey());
                                        if (storeSeqIds != null) {
                                            for (Entry<byte[], Long> store : storeSeqIds.entrySet()) {
                                                FlushedStoreSequenceId.Builder flushedStoreSequenceIdBuilder = FlushedStoreSequenceId.newBuilder();
                                                flushedStoreSequenceIdBuilder.setFamily(ByteString.copyFrom(store.getKey()));
                                                flushedStoreSequenceIdBuilder.setSeqId(store.getValue());
                                                flushedRegionSequenceIdBuilder.addStores(flushedStoreSequenceIdBuilder);
                                            }
                                        }
                                        flushedSequenceIdBuilder.addRegionSequenceId(flushedRegionSequenceIdBuilder);
                                    }
                                    flushedSequenceIdBuilder.build().writeDelimitedTo(out);
                                } finally {
                                    if (out != null) {
                                        out.close();
                                    }
                                }
                            } finally {
                                isFlushSeqIdPersistInProgress = false;
                            }
                        }
                    } catch (IOException e) {
                        LOG.warn("Failed to persist last flushed sequence id of regions" + " to file system", e);
                    }
                }
            }
        }
        return Procedure.NO_PROC_ID;
    }
    LOG.info("Processing expiration of " + serverName + " on " + this.master.getServerName());
    long pid = master.getAssignmentManager().submitServerCrash(serverName, true, force);
    storage.expired(serverName);
    // Tell our listeners that a server was removed
    if (!this.listeners.isEmpty()) {
        this.listeners.stream().forEach(l -> l.serverRemoved(serverName));
    }
    // trigger a persist of flushedSeqId
    if (flushedSeqIdFlusher != null) {
        flushedSeqIdFlusher.triggerNow();
    }
    return pid;
}

synchronized long expireServer(final ServerName serverName, boolean force) {
    // THIS server is going down... can't handle our own expiration.
    if (serverName.equals(master.getServerName())) {
        if (!(master.isAborted() || master.isStopped())) {
            master.stop("We lost our znode?");
        }
        return Procedure.NO_PROC_ID;
    }
    if (this.deadservers.isDeadServer(serverName)) {
        LOG.warn("Expiration called on {} but already in DeadServer", serverName);
        return Procedure.NO_PROC_ID;
    }
    moveFromOnlineToDeadServers(serverName);
    // If server is in draining mode, remove corresponding znode
    // In some tests, the mocked HM may not have ZK Instance, hence null check
    if (master.getZooKeeper() != null) {
        String drainingZnode = ZNodePaths.joinZNode(master.getZooKeeper().getZNodePaths().drainingZNode, serverName.getServerName());
        try {
            ZKUtil.deleteNodeFailSilent(master.getZooKeeper(), drainingZnode);
        } catch (KeeperException e) {
            LOG.warn("Error deleting the draining znode for stopping server " + serverName.getServerName(), e);
        }
    }
    // If cluster is going down, yes, servers are going to be expiring; don't
    // process as a dead server
    if (isClusterShutdown()) {
        LOG.info("Cluster shutdown set; " + serverName + " expired; onlineServers=" + this.onlineServers.size());
        if (this.onlineServers.isEmpty()) {
            master.stop("Cluster shutdown set; onlineServer=0");
        }
        return Procedure.NO_PROC_ID;
    }
    LOG.info("Processing expiration of " + serverName + " on " + this.master.getServerName());
    long pid = master.getAssignmentManager().submitServerCrash(serverName, true, force);
    storage.expired(serverName);
    // Tell our listeners that a server was removed
    if (!this.listeners.isEmpty()) {
        this.listeners.stream().forEach(l -> l.serverRemoved(serverName));
    }
    // trigger a persist of flushedSeqId
    if (flushedSeqIdFlusher != null) {
        flushedSeqIdFlusher.triggerNow();
    }
    return pid;
}
possible Hot2
possible type Hot3_2
2
