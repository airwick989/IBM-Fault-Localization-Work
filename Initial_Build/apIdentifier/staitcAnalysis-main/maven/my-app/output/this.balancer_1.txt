looking:this.balancer
synchronized (this.balancer) {
    // Only allow one balance run at at time.
    if (this.assignmentManager.hasRegionsInTransition()) {
        List<RegionStateNode> regionsInTransition = assignmentManager.getRegionsInTransition();
        // if hbase:meta region is in transition, result of assignment cannot be recorded
        // ignore the force flag in that case
        boolean metaInTransition = assignmentManager.isMetaRegionInTransition();
        List<RegionStateNode> toPrint = regionsInTransition;
        int max = 5;
        boolean truncated = false;
        if (regionsInTransition.size() > max) {
            toPrint = regionsInTransition.subList(0, max);
            truncated = true;
        }
        if (!request.isIgnoreRegionsInTransition() || metaInTransition) {
            LOG.info("Not running balancer (ignoreRIT=false" + ", metaRIT=" + metaInTransition + ") because " + regionsInTransition.size() + " region(s) in transition: " + toPrint + (truncated ? "(truncated list)" : ""));
            return responseBuilder.build();
        }
    }
    if (this.serverManager.areDeadServersInProgress()) {
        LOG.info("Not running balancer because processing dead regionserver(s): " + this.serverManager.getDeadServers());
        return responseBuilder.build();
    }
    if (this.cpHost != null) {
        try {
            if (this.cpHost.preBalance(request)) {
                LOG.debug("Coprocessor bypassing balancer request");
                return responseBuilder.build();
            }
        } catch (IOException ioe) {
            LOG.error("Error invoking master coprocessor preBalance()", ioe);
            return responseBuilder.build();
        }
    }
    Map<TableName, Map<ServerName, List<RegionInfo>>> assignments = this.assignmentManager.getRegionStates().getAssignmentsForBalancer(tableStateManager, this.serverManager.getOnlineServersList());
    for (Map<ServerName, List<RegionInfo>> serverMap : assignments.values()) {
        serverMap.keySet().removeAll(this.serverManager.getDrainingServersList());
    }
    // Give the balancer the current cluster state.
    this.balancer.updateClusterMetrics(getClusterMetricsWithoutCoprocessor());
    List<RegionPlan> plans = this.balancer.balanceCluster(assignments);
    responseBuilder.setBalancerRan(true).setMovesCalculated(plans == null ? 0 : plans.size());
    {
        // Note: this method could be `default` on MasterServices if but for logging.
        if (!isInitialized()) {
            LOG.debug("Master has not been initialized, don't run {}.", action);
            return true;
        }
        {
            return maintenanceMode;
        }
        if (isInMaintenanceMode()) {
            LOG.info("Master is in maintenance mode, don't run {}.", action);
            return true;
        }
        return false;
    }
    // For dry run we don't actually want to execute the moves, but we do want
    // to execute the coprocessor below
    List<RegionPlan> sucRPs = request.isDryRun() ? Collections.emptyList() : executeRegionPlansWithThrottling(plans);
    if (this.cpHost != null) {
        try {
            this.cpHost.postBalance(request, sucRPs);
        } catch (IOException ioe) {
            // balancing already succeeded so don't change the result
            LOG.error("Error invoking master coprocessor postBalance()", ioe);
        }
    }
    responseBuilder.setMovesExecuted(sucRPs.size());
}

synchronized (this.balancer) {
    // Only allow one balance run at at time.
    if (this.assignmentManager.hasRegionsInTransition()) {
        List<RegionStateNode> regionsInTransition = assignmentManager.getRegionsInTransition();
        // if hbase:meta region is in transition, result of assignment cannot be recorded
        // ignore the force flag in that case
        boolean metaInTransition = assignmentManager.isMetaRegionInTransition();
        List<RegionStateNode> toPrint = regionsInTransition;
        int max = 5;
        boolean truncated = false;
        if (regionsInTransition.size() > max) {
            toPrint = regionsInTransition.subList(0, max);
            truncated = true;
        }
        if (!request.isIgnoreRegionsInTransition() || metaInTransition) {
            LOG.info("Not running balancer (ignoreRIT=false" + ", metaRIT=" + metaInTransition + ") because " + regionsInTransition.size() + " region(s) in transition: " + toPrint + (truncated ? "(truncated list)" : ""));
            return responseBuilder.build();
        }
    }
    if (this.serverManager.areDeadServersInProgress()) {
        LOG.info("Not running balancer because processing dead regionserver(s): " + this.serverManager.getDeadServers());
        return responseBuilder.build();
    }
    if (this.cpHost != null) {
        try {
            if (this.cpHost.preBalance(request)) {
                LOG.debug("Coprocessor bypassing balancer request");
                return responseBuilder.build();
            }
        } catch (IOException ioe) {
            LOG.error("Error invoking master coprocessor preBalance()", ioe);
            return responseBuilder.build();
        }
    }
    Map<TableName, Map<ServerName, List<RegionInfo>>> assignments = this.assignmentManager.getRegionStates().getAssignmentsForBalancer(tableStateManager, this.serverManager.getOnlineServersList());
    for (Map<ServerName, List<RegionInfo>> serverMap : assignments.values()) {
        serverMap.keySet().removeAll(this.serverManager.getDrainingServersList());
    }
    // Give the balancer the current cluster state.
    this.balancer.updateClusterMetrics(getClusterMetricsWithoutCoprocessor());
    List<RegionPlan> plans = this.balancer.balanceCluster(assignments);
    responseBuilder.setBalancerRan(true).setMovesCalculated(plans == null ? 0 : plans.size());
    if (skipRegionManagementAction("balancer")) {
        // make one last check that the cluster isn't shutting down before proceeding.
        return responseBuilder.build();
    }
    // For dry run we don't actually want to execute the moves, but we do want
    // to execute the coprocessor below
    List<RegionPlan> sucRPs = request.isDryRun() ? Collections.emptyList() : executeRegionPlansWithThrottling(plans);
    if (this.cpHost != null) {
        try {
            this.cpHost.postBalance(request, sucRPs);
        } catch (IOException ioe) {
            // balancing already succeeded so don't change the result
            LOG.error("Error invoking master coprocessor postBalance()", ioe);
        }
    }
    responseBuilder.setMovesExecuted(sucRPs.size());
}
possible Hot2
possible type Hot3_2
1
