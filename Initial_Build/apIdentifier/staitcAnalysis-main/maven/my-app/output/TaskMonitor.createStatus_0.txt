looking:TaskMonitor.createStatus
TaskMonitor	createStatus
-----------------------
public synchronized MonitoredTask createStatus(String description, boolean ignore, boolean enableJournal) {
    MonitoredTask stat = new MonitoredTaskImpl(enableJournal);
    stat.setDescription(description);
    MonitoredTask proxy = (MonitoredTask) Proxy.newProxyInstance(stat.getClass().getClassLoader(), new Class<?>[] { MonitoredTask.class }, new PassthroughInvocationHandler<>(stat));
    TaskAndWeakRefPair pair = new TaskAndWeakRefPair(stat, proxy);
    if (tasks.isFull()) {
        purgeExpiredTasks();
    }
    if (!ignore) {
        tasks.add(pair);
    }
    return proxy;
}
-----------------------
public synchronized MonitoredTask createStatus(String description, boolean ignore, boolean enableJournal) {
    MonitoredTask stat = new MonitoredTaskImpl(enableJournal);
    stat.setDescription(description);
    MonitoredTask proxy = (MonitoredTask) Proxy.newProxyInstance(stat.getClass().getClassLoader(), new Class<?>[] { MonitoredTask.class }, new PassthroughInvocationHandler<>(stat));
    TaskAndWeakRefPair pair = new TaskAndWeakRefPair(stat, proxy);
    if (tasks.isFull()) {
        purgeExpiredTasks();
        {
            for (Iterator<TaskAndWeakRefPair> it = tasks.iterator(); it.hasNext(); ) {
                TaskAndWeakRefPair pair = it.next();
                MonitoredTask stat = pair.get();
                if (pair.isDead()) {
                    // The class who constructed this leaked it. So we can
                    // assume it's done.
                    if (stat.getState() == MonitoredTaskImpl.State.RUNNING) {
                        LOG.warn("Status " + stat + " appears to have been leaked");
                        stat.cleanup();
                    }
                }
                if (canPurge(stat)) {
                    it.remove();
                }
                {
                    return weakProxy.get() == null;
                }
                {
                    return weakProxy.get() == null;
                }
                {
                    long cts = stat.getCompletionTimestamp();
                    return (cts > 0 && EnvironmentEdgeManager.currentTime() - cts > expirationTime);
                }
                {
                    return weakProxy.get() == null;
                }
                {
                    long cts = stat.getCompletionTimestamp();
                    return (cts > 0 && EnvironmentEdgeManager.currentTime() - cts > expirationTime);
                }
            }
        }
    }
    if (!ignore) {
        tasks.add(pair);
    }
    return proxy;
}-----------------------
possible Hot1
possible type Hot3_2
1
