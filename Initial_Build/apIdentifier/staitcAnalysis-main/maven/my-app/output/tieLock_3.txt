looking:tieLock
// no edits should be coming in via append.
synchronized (tieLock) {
    flushing = this.flushingSequenceIds.remove(encodedRegionName);
    if (flushing != null) {
        Map<ImmutableByteArray, Long> unflushed = getOrCreateLowestSequenceIds(encodedRegionName);
        for (Map.Entry<ImmutableByteArray, Long> e : flushing.entrySet()) {
            // Set into unflushed the 'old' oldest sequenceid and if any value in flushed with this
            // value, it will now be in tmpMap.
            tmpMap.put(e.getKey(), unflushed.put(e.getKey(), e.getValue()));
        }
    }
}

// Here we are moving sequenceids from flushing back to unflushed; doing opposite of what
// happened in startCacheFlush. During prepare phase, we have update lock on the region so
// no edits should be coming in via append.
synchronized (tieLock) {
    flushing = this.flushingSequenceIds.remove(encodedRegionName);
    if (flushing != null) {
        Map<ImmutableByteArray, Long> unflushed = getOrCreateLowestSequenceIds(encodedRegionName);
        for (Map.Entry<ImmutableByteArray, Long> e : flushing.entrySet()) {
            // Set into unflushed the 'old' oldest sequenceid and if any value in flushed with this
            // value, it will now be in tmpMap.
            tmpMap.put(e.getKey(), unflushed.put(e.getKey(), e.getValue()));
        }
    }
}
possible Hot2
possible type Hot3_2
1
