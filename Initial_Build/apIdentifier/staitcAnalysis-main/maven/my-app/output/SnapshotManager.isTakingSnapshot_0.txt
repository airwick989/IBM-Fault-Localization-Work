looking:SnapshotManager.isTakingSnapshot
SnapshotManager	isTakingSnapshot
-----------------------
/**
 * Check to see if there is a snapshot in progress with the same name or on the same table.
 * Currently we have a limitation only allowing a single snapshot per table at a time. Also we
 * don't allow snapshot with the same name.
 * @param snapshot   description of the snapshot being checked.
 * @param checkTable check if the table is already taking a snapshot.
 * @return <tt>true</tt> if there is a snapshot in progress with the same name or on the same
 *         table.
 */
synchronized boolean isTakingSnapshot(final SnapshotDescription snapshot, boolean checkTable) {
    if (checkTable) {
        TableName snapshotTable = TableName.valueOf(snapshot.getTable());
        if (isTakingSnapshot(snapshotTable)) {
            return true;
        }
    }
    Iterator<Map.Entry<TableName, SnapshotSentinel>> it = snapshotHandlers.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry<TableName, SnapshotSentinel> entry = it.next();
        SnapshotSentinel sentinel = entry.getValue();
        if (snapshot.getName().equals(sentinel.getSnapshot().getName()) && !sentinel.isFinished()) {
            return true;
        }
    }
    Iterator<Map.Entry<SnapshotDescription, Long>> spIt = snapshotToProcIdMap.entrySet().iterator();
    while (spIt.hasNext()) {
        Map.Entry<SnapshotDescription, Long> entry = spIt.next();
        if (snapshot.getName().equals(entry.getKey().getName()) && !master.getMasterProcedureExecutor().isFinished(entry.getValue())) {
            return true;
        }
    }
    return false;
}
-----------------------
/**
 * Check to see if there is a snapshot in progress with the same name or on the same table.
 * Currently we have a limitation only allowing a single snapshot per table at a time. Also we
 * don't allow snapshot with the same name.
 * @param snapshot   description of the snapshot being checked.
 * @param checkTable check if the table is already taking a snapshot.
 * @return <tt>true</tt> if there is a snapshot in progress with the same name or on the same
 *         table.
 */
synchronized boolean isTakingSnapshot(final SnapshotDescription snapshot, boolean checkTable) {
    if (checkTable) {
        TableName snapshotTable = TableName.valueOf(snapshot.getTable());
        if (isTakingSnapshot(snapshotTable)) {
            return true;
        }
        {
            if (checkTable) {
                TableName snapshotTable = TableName.valueOf(snapshot.getTable());
                if (isTakingSnapshot(snapshotTable)) {
                    return true;
                }
            }
            Iterator<Map.Entry<TableName, SnapshotSentinel>> it = snapshotHandlers.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry<TableName, SnapshotSentinel> entry = it.next();
                SnapshotSentinel sentinel = entry.getValue();
                if (snapshot.getName().equals(sentinel.getSnapshot().getName()) && !sentinel.isFinished()) {
                    return true;
                }
            }
            Iterator<Map.Entry<SnapshotDescription, Long>> spIt = snapshotToProcIdMap.entrySet().iterator();
            while (spIt.hasNext()) {
                Map.Entry<SnapshotDescription, Long> entry = spIt.next();
                if (snapshot.getName().equals(entry.getKey().getName()) && !master.getMasterProcedureExecutor().isFinished(entry.getValue())) {
                    return true;
                }
            }
            return false;
        }
    }
    Iterator<Map.Entry<TableName, SnapshotSentinel>> it = snapshotHandlers.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry<TableName, SnapshotSentinel> entry = it.next();
        SnapshotSentinel sentinel = entry.getValue();
        if (snapshot.getName().equals(sentinel.getSnapshot().getName()) && !sentinel.isFinished()) {
            return true;
        }
    }
    Iterator<Map.Entry<SnapshotDescription, Long>> spIt = snapshotToProcIdMap.entrySet().iterator();
    while (spIt.hasNext()) {
        Map.Entry<SnapshotDescription, Long> entry = spIt.next();
        if (snapshot.getName().equals(entry.getKey().getName()) && !master.getMasterProcedureExecutor().isFinished(entry.getValue())) {
            return true;
        }
    }
    return false;
}-----------------------
possible Hot2
possible type Hot3_2
1
