looking:RateLimiter.set
/**
 * Set the RateLimiter max available resources and refill period.
 * @param limit    The max value available resource units can be refilled to.
 * @param timeUnit Timeunit factor for translating to ms.
 */
public synchronized void set(final long limit, final TimeUnit timeUnit) {
    switch(timeUnit) {
        case MILLISECONDS:
            tunit = 1;
            break;
        case SECONDS:
            tunit = 1000;
            break;
        case MINUTES:
            tunit = 60 * 1000;
            break;
        case HOURS:
            tunit = 60 * 60 * 1000;
            break;
        case DAYS:
            tunit = 24 * 60 * 60 * 1000;
            break;
        default:
            throw new RuntimeException("Unsupported " + timeUnit.name() + " TimeUnit.");
    }
    this.limit = limit;
    this.avail = limit;
}

/**
 * Set the RateLimiter max available resources and refill period.
 * @param limit    The max value available resource units can be refilled to.
 * @param timeUnit Timeunit factor for translating to ms.
 */
public synchronized void set(final long limit, final TimeUnit timeUnit) {
    switch(timeUnit) {
        case MILLISECONDS:
            tunit = 1;
            break;
        case SECONDS:
            tunit = 1000;
            break;
        case MINUTES:
            tunit = 60 * 1000;
            break;
        case HOURS:
            tunit = 60 * 60 * 1000;
            break;
        case DAYS:
            tunit = 24 * 60 * 60 * 1000;
            break;
        default:
            throw new RuntimeException("Unsupported " + timeUnit.name() + " TimeUnit.");
    }
    this.limit = limit;
    this.avail = limit;
}
possible Hot1
