looking:RegionServerTracker.refresh
private synchronized void refresh() {
    List<String> names;
    final Span span = TraceUtil.createSpan("RegionServerTracker.refresh");
    try (final Scope ignored = span.makeCurrent()) {
        try {
            names = ZKUtil.listChildrenAndWatchForNewChildren(watcher, watcher.getZNodePaths().rsZNode);
        } catch (KeeperException e) {
            // here we need to abort as we failed to set watcher on the rs node which means that we can
            // not track the node deleted event any more.
            server.abort("Unexpected zk exception getting RS nodes", e);
            return;
        }
        Set<ServerName> newServers = CollectionUtils.isEmpty(names) ? Collections.emptySet() : names.stream().map(ServerName::parseServerName).collect(Collectors.collectingAndThen(Collectors.toSet(), Collections::unmodifiableSet));
        if (active) {
            {
                Set<ServerName> oldServers = regionServers;
                ServerManager serverManager = server.getServerManager();
                // expire dead servers
                for (ServerName crashedServer : Sets.difference(oldServers, newServers)) {
                    LOG.info("RegionServer ephemeral node deleted, processing expiration [{}]", crashedServer);
                    serverManager.expireServer(crashedServer);
                }
                // check whether there are new servers, log them
                boolean newServerAdded = false;
                for (ServerName sn : newServers) {
                    if (!oldServers.contains(sn)) {
                        newServerAdded = true;
                        LOG.info("RegionServer ephemeral node created, adding [" + sn + "]");
                    }
                }
                if (newServerAdded && server.isInitialized()) {
                    // Only call the check to move servers if a RegionServer was added to the cluster; in this
                    // case it could be a server with a new version so it makes sense to run the check.
                    server.checkIfShouldMoveSystemRegionAsync();
                }
            }
        }
        this.regionServers = newServers;
        span.setStatus(StatusCode.OK);
    } finally {
        span.end();
    }
}

private synchronized void refresh() {
    List<String> names;
    final Span span = TraceUtil.createSpan("RegionServerTracker.refresh");
    try (final Scope ignored = span.makeCurrent()) {
        try {
            names = ZKUtil.listChildrenAndWatchForNewChildren(watcher, watcher.getZNodePaths().rsZNode);
        } catch (KeeperException e) {
            // here we need to abort as we failed to set watcher on the rs node which means that we can
            // not track the node deleted event any more.
            server.abort("Unexpected zk exception getting RS nodes", e);
            return;
        }
        Set<ServerName> newServers = CollectionUtils.isEmpty(names) ? Collections.emptySet() : names.stream().map(ServerName::parseServerName).collect(Collectors.collectingAndThen(Collectors.toSet(), Collections::unmodifiableSet));
        if (active) {
            processAsActiveMaster(newServers);
        }
        this.regionServers = newServers;
        span.setStatus(StatusCode.OK);
    } finally {
        span.end();
    }
}
possible Hot1
possible type Hot3_2
1
