looking:file
synchronized (file) {
    try {
        StoreFileReader r = file.getReader();
        if (r == null) {
            LOG.debug("The file {} was closed but still not archived", file);
            // HACK: Temporarily re-open the reader so we can get the size of the file. Ideally,
            // we should know the size of an HStoreFile without having to ask the HStoreFileReader
            // for that.
            long length = getStoreFileSize(file);
            {
                storeEngine.readLock();
                try {
                    if (this.currentParallelPutCount.getAndIncrement() > this.parallelPutCountPrintThreshold) {
                        LOG.trace("tableName={}, encodedName={}, columnFamilyName={} is too busy!", this.getTableName(), this.getRegionInfo().getEncodedName(), this.getColumnFamilyName());
                    }
                    this.memstore.add(cell, memstoreSizing);
                } finally {
                    storeEngine.readUnlock();
                    currentParallelPutCount.decrementAndGet();
                }
            }
            storeFileSizes.add(length);
            continue;
        }
        if (file.isCompactedAway() && !file.isReferencedInReads()) {
            // Even if deleting fails we need not bother as any new scanners won't be
            // able to use the compacted file as the status is already compactedAway
            LOG.trace("Closing and archiving the file {}", file);
            // Copy the file size before closing the reader
            final long length = r.length();
            {
                // findbugs can not recognize storeEngine.writeLock is just a lock operation so it will report
                // UL_UNRELEASED_LOCK_EXCEPTION_PATH, so here we have to use two try finally...
                // Change later if findbugs becomes smarter in the future.
                this.archiveLock.lock();
                try {
                    this.storeEngine.writeLock();
                    try {
                        {
                            // Clear so metrics doesn't find them.
                            ImmutableCollection<HStoreFile> result = storeEngine.getStoreFileManager().clearFiles();
                            Collection<HStoreFile> compactedfiles = storeEngine.getStoreFileManager().clearCompactedFiles();
                            // clear the compacted files
                            if (CollectionUtils.isNotEmpty(compactedfiles)) {
                                removeCompactedfiles(compactedfiles, getCacheConfig() != null ? getCacheConfig().shouldEvictOnClose() : true);
                            }
                            if (!result.isEmpty()) {
                                // initialize the thread pool for closing store files in parallel.
                                ThreadPoolExecutor storeFileCloserThreadPool = this.region.getStoreFileOpenAndCloseThreadPool("StoreFileCloser-" + this.region.getRegionInfo().getEncodedName() + "-" + this.getColumnFamilyName());
                                // close each store file in parallel
                                CompletionService<Void> completionService = new ExecutorCompletionService<>(storeFileCloserThreadPool);
                                for (HStoreFile f : result) {
                                    completionService.submit(new Callable<Void>() {

                                        @Override
                                        public Void call() throws IOException {
                                            boolean evictOnClose = getCacheConfig() != null ? getCacheConfig().shouldEvictOnClose() : true;
                                            f.closeStoreFile(evictOnClose);
                                            return null;
                                        }
                                    });
                                }
                                IOException ioe = null;
                                try {
                                    for (int i = 0; i < result.size(); i++) {
                                        try {
                                            Future<Void> future = completionService.take();
                                            future.get();
                                        } catch (InterruptedException e) {
                                            if (ioe == null) {
                                                ioe = new InterruptedIOException();
                                                ioe.initCause(e);
                                            }
                                        } catch (ExecutionException e) {
                                            if (ioe == null) {
                                                ioe = new IOException(e.getCause());
                                            }
                                        }
                                    }
                                } finally {
                                    storeFileCloserThreadPool.shutdownNow();
                                }
                                if (ioe != null) {
                                    throw ioe;
                                }
                            }
                            LOG.trace("Closed {}", this);
                            return result;
                        }
                    } finally {
                        this.storeEngine.writeUnlock();
                    }
                } finally {
                    this.archiveLock.unlock();
                }
            }
            // Just close and return
            filesToRemove.add(file);
            // Only add the length if we successfully added the file to `filesToRemove`
            storeFileSizes.add(length);
        } else {
            LOG.info("Can't archive compacted file " + file.getPath() + " because of either isCompactedAway=" + file.isCompactedAway() + " or file has reference, isReferencedInReads=" + file.isReferencedInReads() + ", refCount=" + r.getRefCount() + ", skipping for now.");
        }
    } catch (Exception e) {
        LOG.error("Exception while trying to close the compacted store file {}", file.getPath(), e);
    }
}

synchronized (file) {
    try {
        StoreFileReader r = file.getReader();
        if (r == null) {
            LOG.debug("The file {} was closed but still not archived", file);
            // HACK: Temporarily re-open the reader so we can get the size of the file. Ideally,
            // we should know the size of an HStoreFile without having to ask the HStoreFileReader
            // for that.
            long length = getStoreFileSize(file);
            filesToRemove.add(file);
            storeFileSizes.add(length);
            continue;
        }
        if (file.isCompactedAway() && !file.isReferencedInReads()) {
            // Even if deleting fails we need not bother as any new scanners won't be
            // able to use the compacted file as the status is already compactedAway
            LOG.trace("Closing and archiving the file {}", file);
            // Copy the file size before closing the reader
            final long length = r.length();
            r.close(evictOnClose);
            // Just close and return
            filesToRemove.add(file);
            // Only add the length if we successfully added the file to `filesToRemove`
            storeFileSizes.add(length);
        } else {
            LOG.info("Can't archive compacted file " + file.getPath() + " because of either isCompactedAway=" + file.isCompactedAway() + " or file has reference, isReferencedInReads=" + file.isReferencedInReads() + ", refCount=" + r.getRefCount() + ", skipping for now.");
        }
    } catch (Exception e) {
        LOG.error("Exception while trying to close the compacted store file {}", file.getPath(), e);
    }
}
possible Hot1
possible type Hot3_2
1
