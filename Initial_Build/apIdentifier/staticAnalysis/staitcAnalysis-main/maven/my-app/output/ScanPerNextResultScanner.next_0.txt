looking:ScanPerNextResultScanner.next
@Override
public synchronized Result next() throws IOException {
    if (queue.isEmpty()) {
        if (resumer != null) {
            resumer.resume();
            resumer = null;
        } else {
            table.scan(scan, this);
        }
    }
    while (queue.isEmpty()) {
        if (closed) {
            return null;
        }
        if (error != null) {
            Throwables.propagateIfPossible(error, IOException.class);
            throw new IOException(error);
        }
        try {
            wait();
        } catch (InterruptedException e) {
            throw new InterruptedIOException();
        }
    }
    return queue.poll();
}

@Override
public synchronized Result next() throws IOException {
    if (queue.isEmpty()) {
        if (resumer != null) {
            resumer.resume();
            resumer = null;
        } else {
            table.scan(scan, this);
        }
    }
    while (queue.isEmpty()) {
        if (closed) {
            return null;
        }
        if (error != null) {
            Throwables.propagateIfPossible(error, IOException.class);
            throw new IOException(error);
        }
        try {
            wait();
        } catch (InterruptedException e) {
            throw new InterruptedIOException();
        }
    }
    return queue.poll();
}
possible Hot1
possible type Hot3_2
1
