looking:VisibilityController.listLabels
@Override
public synchronized void listLabels(RpcController controller, ListLabelsRequest request, RpcCallback<ListLabelsResponse> done) {
    ListLabelsResponse.Builder response = ListLabelsResponse.newBuilder();
    if (!initialized) {
        controller.setFailed("VisibilityController not yet initialized");
    } else {
        List<String> labels = null;
        String regex = request.hasRegex() ? request.getRegex() : null;
        try {
            // We do ACL check here as we create scanner directly on region. It will not make calls to
            // AccessController CP methods.
            if (authorizationEnabled && accessControllerAvailable && !isSystemOrSuperUser()) {
                User requestingUser = VisibilityUtils.getActiveUser();
                throw new AccessDeniedException("User '" + (requestingUser != null ? requestingUser.getShortName() : "null") + "' is not authorized to perform this action.");
            }
            labels = this.visibilityLabelService.listLabels(regex);
            logResult(true, "listLabels", "Listing labels allowed", null, null, regex);
        } catch (AccessDeniedException e) {
            logResult(false, "listLabels", e.getMessage(), null, null, regex);
            CoprocessorRpcUtils.setControllerException(controller, e);
        } catch (IOException e) {
            CoprocessorRpcUtils.setControllerException(controller, e);
        }
        if (labels != null && !labels.isEmpty()) {
            for (String label : labels) {
                response.addLabel(ByteString.copyFrom(Bytes.toBytes(label)));
            }
        }
    }
    done.run(response.build());
}

@Override
public synchronized void listLabels(RpcController controller, ListLabelsRequest request, RpcCallback<ListLabelsResponse> done) {
    ListLabelsResponse.Builder response = ListLabelsResponse.newBuilder();
    if (!initialized) {
        controller.setFailed("VisibilityController not yet initialized");
    } else {
        List<String> labels = null;
        String regex = request.hasRegex() ? request.getRegex() : null;
        try {
            // We do ACL check here as we create scanner directly on region. It will not make calls to
            // AccessController CP methods.
            if (authorizationEnabled && accessControllerAvailable && !isSystemOrSuperUser()) {
                User requestingUser = VisibilityUtils.getActiveUser();
                throw new AccessDeniedException("User '" + (requestingUser != null ? requestingUser.getShortName() : "null") + "' is not authorized to perform this action.");
            }
            labels = this.visibilityLabelService.listLabels(regex);
            logResult(true, "listLabels", "Listing labels allowed", null, null, regex);
        } catch (AccessDeniedException e) {
            logResult(false, "listLabels", e.getMessage(), null, null, regex);
            CoprocessorRpcUtils.setControllerException(controller, e);
        } catch (IOException e) {
            CoprocessorRpcUtils.setControllerException(controller, e);
        }
        if (labels != null && !labels.isEmpty()) {
            for (String label : labels) {
                response.addLabel(ByteString.copyFrom(Bytes.toBytes(label)));
            }
        }
    }
    done.run(response.build());
}
possible Hot1
possible type Hot3_2
1
