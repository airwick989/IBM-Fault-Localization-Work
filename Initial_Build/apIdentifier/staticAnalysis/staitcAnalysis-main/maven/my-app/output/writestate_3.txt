looking:writestate
synchronized (writestate) {
    if (replaySeqId < lastReplayedOpenRegionSeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying compaction event :" + TextFormat.shortDebugString(compaction) + " because its sequence id " + replaySeqId + " is smaller than this regions " + "lastReplayedOpenRegionSeqId of " + lastReplayedOpenRegionSeqId);
        return;
    }
    if (replaySeqId < lastReplayedCompactionSeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying compaction event :" + TextFormat.shortDebugString(compaction) + " because its sequence id " + replaySeqId + " is smaller than this regions " + "lastReplayedCompactionSeqId of " + lastReplayedCompactionSeqId);
        return;
    } else {
        lastReplayedCompactionSeqId = replaySeqId;
    }
    if (LOG.isDebugEnabled()) {
        LOG.debug(getRegionInfo().getEncodedName() + " : " + "Replaying compaction marker " + TextFormat.shortDebugString(compaction) + " with seqId=" + replaySeqId + " and lastReplayedOpenRegionSeqId=" + lastReplayedOpenRegionSeqId);
    }
    startRegionOperation(Operation.REPLAY_EVENT);
    try {
        HStore store = this.getStore(compaction.getFamilyName().toByteArray());
        if (store == null) {
            LOG.warn(getRegionInfo().getEncodedName() + " : " + "Found Compaction WAL edit for deleted family:" + Bytes.toString(compaction.getFamilyName().toByteArray()));
            return;
        }
        store.replayCompactionMarker(compaction, pickCompactionFiles, removeFiles);
        {
            if (LOG.isTraceEnabled()) {
                LOG.trace(getRegionInfo().getEncodedName() + " : Store files for region: ");
                stores.values().stream().filter(s -> s.getStorefiles() != null).flatMap(s -> s.getStorefiles().stream()).forEachOrdered(sf -> LOG.trace(getRegionInfo().getEncodedName() + " : " + sf));
            }
        }
    } catch (FileNotFoundException ex) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "At least one of the store files in compaction: " + TextFormat.shortDebugString(compaction) + " doesn't exist any more. Skip loading the file(s)", ex);
    } finally {
        closeRegionOperation(Operation.REPLAY_EVENT);
    }
}

synchronized (writestate) {
    if (replaySeqId < lastReplayedOpenRegionSeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying compaction event :" + TextFormat.shortDebugString(compaction) + " because its sequence id " + replaySeqId + " is smaller than this regions " + "lastReplayedOpenRegionSeqId of " + lastReplayedOpenRegionSeqId);
        return;
    }
    if (replaySeqId < lastReplayedCompactionSeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying compaction event :" + TextFormat.shortDebugString(compaction) + " because its sequence id " + replaySeqId + " is smaller than this regions " + "lastReplayedCompactionSeqId of " + lastReplayedCompactionSeqId);
        return;
    } else {
        lastReplayedCompactionSeqId = replaySeqId;
    }
    if (LOG.isDebugEnabled()) {
        LOG.debug(getRegionInfo().getEncodedName() + " : " + "Replaying compaction marker " + TextFormat.shortDebugString(compaction) + " with seqId=" + replaySeqId + " and lastReplayedOpenRegionSeqId=" + lastReplayedOpenRegionSeqId);
    }
    startRegionOperation(Operation.REPLAY_EVENT);
    try {
        HStore store = this.getStore(compaction.getFamilyName().toByteArray());
        if (store == null) {
            LOG.warn(getRegionInfo().getEncodedName() + " : " + "Found Compaction WAL edit for deleted family:" + Bytes.toString(compaction.getFamilyName().toByteArray()));
            return;
        }
        store.replayCompactionMarker(compaction, pickCompactionFiles, removeFiles);
        logRegionFiles();
    } catch (FileNotFoundException ex) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "At least one of the store files in compaction: " + TextFormat.shortDebugString(compaction) + " doesn't exist any more. Skip loading the file(s)", ex);
    } finally {
        closeRegionOperation(Operation.REPLAY_EVENT);
    }
}
possible Hot2
