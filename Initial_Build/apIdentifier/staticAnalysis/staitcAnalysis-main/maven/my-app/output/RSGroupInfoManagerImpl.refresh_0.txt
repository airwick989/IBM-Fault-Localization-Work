looking:RSGroupInfoManagerImpl.refresh
/**
 * Read rsgroup info from the source of truth, the hbase:rsgroup table. Update zk cache. Called on
 * startup of the manager.
 */
private synchronized void refresh(boolean forceOnline) throws IOException {
    List<RSGroupInfo> groupList = new ArrayList<>();
    // Overwrite anything read from zk, group table is source of truth
    // if online read from GROUP table
    if (forceOnline || isOnline()) {
        LOG.debug("Refreshing in Online mode.");
        groupList.addAll(retrieveGroupListFromGroupTable());
    } else {
        LOG.debug("Refreshing in Offline mode.");
        groupList.addAll(retrieveGroupListFromZookeeper());
    }
    // This is added to the last of the list so it overwrites the 'default' rsgroup loaded
    // from region group table or zk
    groupList.add(new RSGroupInfo(RSGroupInfo.DEFAULT_GROUP, getDefaultServers(groupList)));
    // populate the data
    HashMap<String, RSGroupInfo> newGroupMap = Maps.newHashMap();
    for (RSGroupInfo group : groupList) {
        newGroupMap.put(group.getName(), group);
    }
    {
        this.holder = new RSGroupInfoHolder(newRSGroupMap);
    }
    updateCacheOfRSGroups(newGroupMap.keySet());
}

/**
 * Read rsgroup info from the source of truth, the hbase:rsgroup table. Update zk cache. Called on
 * startup of the manager.
 */
private synchronized void refresh(boolean forceOnline) throws IOException {
    List<RSGroupInfo> groupList = new ArrayList<>();
    // Overwrite anything read from zk, group table is source of truth
    // if online read from GROUP table
    if (forceOnline || isOnline()) {
        LOG.debug("Refreshing in Online mode.");
        groupList.addAll(retrieveGroupListFromGroupTable());
    } else {
        LOG.debug("Refreshing in Offline mode.");
        groupList.addAll(retrieveGroupListFromZookeeper());
    }
    // This is added to the last of the list so it overwrites the 'default' rsgroup loaded
    // from region group table or zk
    groupList.add(new RSGroupInfo(RSGroupInfo.DEFAULT_GROUP, getDefaultServers(groupList)));
    // populate the data
    HashMap<String, RSGroupInfo> newGroupMap = Maps.newHashMap();
    for (RSGroupInfo group : groupList) {
        newGroupMap.put(group.getName(), group);
    }
    resetRSGroupMap(newGroupMap);
    updateCacheOfRSGroups(newGroupMap.keySet());
}
possible Hot1
possible type Hot3_2
1
