looking:pipeline
synchronized (pipeline) {
    if (versionedList.getVersion() != version) {
        return false;
    }
    suffix = versionedList.getStoreSegments();
    LOG.debug("Swapping pipeline suffix; before={}, new segment={}", versionedList.getStoreSegments().size(), segment);
    {
        {
            {
                return readOnlyCopy.isEmpty();
            }
            if (pipeline.size() < suffix.size()) {
                throw new IllegalStateException("CODE-BUG:pipleine size:[" + pipeline.size() + "],suffix size:[" + suffix.size() + "],pipeline size must greater than or equals suffix size");
            }
            ListIterator<? extends Segment> suffixIterator = suffix.listIterator(suffix.size());
            ListIterator<? extends Segment> pipelineIterator = pipeline.listIterator(pipeline.size());
            int count = 0;
            while (suffixIterator.hasPrevious()) {
                Segment suffixSegment = suffixIterator.previous();
                Segment pipelineSegment = pipelineIterator.previous();
                if (suffixSegment != pipelineSegment) {
                    throw new IllegalStateException("CODE-BUG:suffix last:[" + count + "]" + suffixSegment + " is not pipleline segment:[" + pipelineSegment + "]");
                }
                count++;
            }
            for (int index = 1; index <= count; index++) {
                pipeline.pollLast();
            }
        }
        if (segment != null) {
            pipeline.addLast(segment);
        }
        // During index merge we won't be closing the segments undergoing the merge. Segment#close()
        // will release the MSLAB chunks to pool. But in case of index merge there wont be any data copy
        // from old MSLABs. So the new cells in new segment also refers to same chunks. In case of data
        // compaction, we would have copied the cells data from old MSLAB chunks into a new chunk
        // created for the result segment. So we can release the chunks associated with the compacted
        // segments.
        if (closeSegmentsInSuffix) {
            for (Segment itemInSuffix : suffix) {
                itemInSuffix.close();
            }
        }
    }
    readOnlyCopy = new LinkedList<>(pipeline);
    version++;
}

synchronized (pipeline) {
    if (versionedList.getVersion() != version) {
        return false;
    }
    suffix = versionedList.getStoreSegments();
    LOG.debug("Swapping pipeline suffix; before={}, new segment={}", versionedList.getStoreSegments().size(), segment);
    swapSuffix(suffix, segment, closeSuffix);
    readOnlyCopy = new LinkedList<>(pipeline);
    version++;
}
possible Hot2
possible type Hot3_2
1
