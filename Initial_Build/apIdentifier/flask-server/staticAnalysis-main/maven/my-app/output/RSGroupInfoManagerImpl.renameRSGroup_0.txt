looking:RSGroupInfoManagerImpl.renameRSGroup
RSGroupInfoManagerImpl	renameRSGroup
-----------------------
@Override
public synchronized void renameRSGroup(String oldName, String newName) throws IOException {
    if (oldName.equals(RSGroupInfo.DEFAULT_GROUP)) {
        throw new ConstraintException(RSGroupInfo.DEFAULT_GROUP + " can't be rename");
    }
    checkGroupName(newName);
    // getRSGroupInfo validates old RSGroup existence.
    RSGroupInfo oldRSG = getRSGroupInfo(oldName);
    Map<String, RSGroupInfo> rsGroupMap = holder.groupName2Group;
    if (rsGroupMap.containsKey(newName)) {
        throw new ConstraintException("Group already exists: " + newName);
    }
    Map<String, RSGroupInfo> newGroupMap = Maps.newHashMap(rsGroupMap);
    newGroupMap.remove(oldRSG.getName());
    RSGroupInfo newRSG = new RSGroupInfo(newName, oldRSG.getServers());
    newGroupMap.put(newName, newRSG);
    flushConfig(newGroupMap);
    Set<TableName> updateTables = masterServices.getTableDescriptors().getAll().values().stream().filter(t -> oldName.equals(t.getRegionServerGroup().orElse(null))).map(TableDescriptor::getTableName).collect(Collectors.toSet());
    setRSGroup(updateTables, newName);
    LOG.info("Rename RSGroup done: {} => {}", oldName, newName);
}
-----------------------
@Override
public synchronized void renameRSGroup(String oldName, String newName) throws IOException {
    if (oldName.equals(RSGroupInfo.DEFAULT_GROUP)) {
        throw new ConstraintException(RSGroupInfo.DEFAULT_GROUP + " can't be rename");
    }
    checkGroupName(newName);
    // getRSGroupInfo validates old RSGroup existence.
    RSGroupInfo oldRSG = getRSGroupInfo(oldName);
    Map<String, RSGroupInfo> rsGroupMap = holder.groupName2Group;
    if (rsGroupMap.containsKey(newName)) {
        throw new ConstraintException("Group already exists: " + newName);
    }
    Map<String, RSGroupInfo> newGroupMap = Maps.newHashMap(rsGroupMap);
    newGroupMap.remove(oldRSG.getName());
    RSGroupInfo newRSG = new RSGroupInfo(newName, oldRSG.getServers());
    newGroupMap.put(newName, newRSG);
    flushConfig(newGroupMap);
    Set<TableName> updateTables = masterServices.getTableDescriptors().getAll().values().stream().filter(t -> oldName.equals(t.getRegionServerGroup().orElse(null))).map(TableDescriptor::getTableName).collect(Collectors.toSet());
    setRSGroup(updateTables, newName);
    LOG.info("Rename RSGroup done: {} => {}", oldName, newName);
    {
        if (!groupName.matches("[a-zA-Z0-9_]+")) {
            throw new ConstraintException("RSGroup name should only contain alphanumeric characters");
        }
    }
    {
        getRSGroupInfo(groupName);
        moveTablesAndWait(tables, groupName);
        {
            LOG.debug("Moving {} tables to target group {}", tables.size(), targetGroup);
            List<Long> procIds = new ArrayList<Long>();
            for (TableName tableName : tables) {
                TableDescriptor oldTd = masterServices.getTableDescriptors().get(tableName);
                if (oldTd == null) {
                    continue;
                }
                TableDescriptor newTd = TableDescriptorBuilder.newBuilder(oldTd).setRegionServerGroup(targetGroup).build();
                procIds.add(masterServices.modifyTable(tableName, newTd, HConstants.NO_NONCE, HConstants.NO_NONCE));
            }
            for (long procId : procIds) {
                Procedure<?> proc = masterServices.getMasterProcedureExecutor().getProcedure(procId);
                if (proc == null) {
                    continue;
                }
                ProcedureSyncWait.waitForProcedureToCompleteIOE(masterServices.getMasterProcedureExecutor(), proc, Long.MAX_VALUE);
            }
            LOG.info("Move tables done: moved {} tables to {}", tables.size(), targetGroup);
            if (LOG.isDebugEnabled()) {
                LOG.debug("Tables moved to {}: {}", targetGroup, tables);
            }
        }
        {
            LOG.debug("Moving {} tables to target group {}", tables.size(), targetGroup);
            List<Long> procIds = new ArrayList<Long>();
            for (TableName tableName : tables) {
                TableDescriptor oldTd = masterServices.getTableDescriptors().get(tableName);
                if (oldTd == null) {
                    continue;
                }
                TableDescriptor newTd = TableDescriptorBuilder.newBuilder(oldTd).setRegionServerGroup(targetGroup).build();
                procIds.add(masterServices.modifyTable(tableName, newTd, HConstants.NO_NONCE, HConstants.NO_NONCE));
            }
            for (long procId : procIds) {
                Procedure<?> proc = masterServices.getMasterProcedureExecutor().getProcedure(procId);
                if (proc == null) {
                    continue;
                }
                ProcedureSyncWait.waitForProcedureToCompleteIOE(masterServices.getMasterProcedureExecutor(), proc, Long.MAX_VALUE);
            }
            LOG.info("Move tables done: moved {} tables to {}", tables.size(), targetGroup);
            if (LOG.isDebugEnabled()) {
                LOG.debug("Tables moved to {}: {}", targetGroup, tables);
            }
        }
    }
}-----------------------
possible Hot1
possible type Hot3_2
1
