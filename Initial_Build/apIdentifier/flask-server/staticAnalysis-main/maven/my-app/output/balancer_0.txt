looking:balancer
RSGroupInfoManagerImpl	balanceRSGroup
-----------------------
synchronized (balancer) {
    // If balance not true, don't run balancer.
    if (!masterServices.isBalancerOn() && !request.isDryRun()) {
        return responseBuilder.build();
    }
    // Only allow one balance run at at time.
    Map<String, RegionState> groupRIT = rsGroupGetRegionsInTransition(groupName);
    if (groupRIT.size() > 0 && !request.isIgnoreRegionsInTransition()) {
        LOG.debug("Not running balancer because {} region(s) in transition: {}", groupRIT.size(), StringUtils.abbreviate(masterServices.getAssignmentManager().getRegionStates().getRegionsInTransition().toString(), 256));
        return responseBuilder.build();
    }
    if (serverManager.areDeadServersInProgress()) {
        LOG.debug("Not running balancer because processing dead regionserver(s): {}", serverManager.getDeadServers());
        return responseBuilder.build();
    }
    // We balance per group instead of per table
    Map<TableName, Map<ServerName, List<RegionInfo>>> assignmentsByTable = getRSGroupAssignmentsByTable(masterServices.getTableStateManager(), groupName);
    List<RegionPlan> plans = balancer.balanceCluster(assignmentsByTable);
    boolean balancerRan = !plans.isEmpty();
    responseBuilder.setBalancerRan(balancerRan).setMovesCalculated(plans.size());
    if (balancerRan && !request.isDryRun()) {
        LOG.info("RSGroup balance {} starting with plan count: {}", groupName, plans.size());
        List<RegionPlan> executed = masterServices.executeRegionPlansWithThrottling(plans);
        responseBuilder.setMovesExecuted(executed.size());
        LOG.info("RSGroup balance " + groupName + " completed");
    }
    return responseBuilder.build();
}
-----------------------
synchronized (balancer) {
    // If balance not true, don't run balancer.
    if (!masterServices.isBalancerOn() && !request.isDryRun()) {
        return responseBuilder.build();
    }
    // Only allow one balance run at at time.
    Map<String, RegionState> groupRIT = rsGroupGetRegionsInTransition(groupName);
    if (groupRIT.size() > 0 && !request.isIgnoreRegionsInTransition()) {
        LOG.debug("Not running balancer because {} region(s) in transition: {}", groupRIT.size(), StringUtils.abbreviate(masterServices.getAssignmentManager().getRegionStates().getRegionsInTransition().toString(), 256));
        return responseBuilder.build();
    }
    if (serverManager.areDeadServersInProgress()) {
        LOG.debug("Not running balancer because processing dead regionserver(s): {}", serverManager.getDeadServers());
        return responseBuilder.build();
    }
    // We balance per group instead of per table
    Map<TableName, Map<ServerName, List<RegionInfo>>> assignmentsByTable = getRSGroupAssignmentsByTable(masterServices.getTableStateManager(), groupName);
    List<RegionPlan> plans = balancer.balanceCluster(assignmentsByTable);
    boolean balancerRan = !plans.isEmpty();
    responseBuilder.setBalancerRan(balancerRan).setMovesCalculated(plans.size());
    if (balancerRan && !request.isDryRun()) {
        LOG.info("RSGroup balance {} starting with plan count: {}", groupName, plans.size());
        List<RegionPlan> executed = masterServices.executeRegionPlansWithThrottling(plans);
        responseBuilder.setMovesExecuted(executed.size());
        LOG.info("RSGroup balance " + groupName + " completed");
    }
    return responseBuilder.build();
}-----------------------
possible Hot1
