looking:AuthenticationTokenSecretManager.rollCurrentKey
AuthenticationTokenSecretManager	rollCurrentKey
-----------------------
synchronized void rollCurrentKey() {
    if (!leaderElector.isMaster()) {
        LOG.info("Skipping rollCurrentKey() because not running as master.");
        return;
    }
    long now = EnvironmentEdgeManager.currentTime();
    AuthenticationKey prev = currentKey;
    AuthenticationKey newKey = new // don't allow to
    AuthenticationKey(// don't allow to
    ++idSeq, // don't allow to
    Long.MAX_VALUE, // expire until it's
    // replaced by a new
    // key
    generateSecret());
    allKeys.put(newKey.getKeyId(), newKey);
    currentKey = newKey;
    zkWatcher.addKeyToZK(newKey);
    lastKeyUpdate = now;
    if (prev != null) {
        // make sure previous key is still stored
        prev.setExpiration(now + tokenMaxLifetime);
        allKeys.put(prev.getKeyId(), prev);
        zkWatcher.updateKeyInZK(prev);
    }
}
-----------------------
synchronized void rollCurrentKey() {
    if (!leaderElector.isMaster()) {
        LOG.info("Skipping rollCurrentKey() because not running as master.");
        return;
    }
    long now = EnvironmentEdgeManager.currentTime();
    AuthenticationKey prev = currentKey;
    AuthenticationKey newKey = new // don't allow to
    AuthenticationKey(// don't allow to
    ++idSeq, // don't allow to
    Long.MAX_VALUE, // expire until it's
    // replaced by a new
    // key
    generateSecret());
    allKeys.put(newKey.getKeyId(), newKey);
    currentKey = newKey;
    zkWatcher.addKeyToZK(newKey);
    lastKeyUpdate = now;
    if (prev != null) {
        // make sure previous key is still stored
        prev.setExpiration(now + tokenMaxLifetime);
        allKeys.put(prev.getKeyId(), prev);
        zkWatcher.updateKeyInZK(prev);
    }
}-----------------------
possible Hot1
